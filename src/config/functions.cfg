 apache_child_terminate(); bool
  apache_lookup_uri(string filename); object -- Read entire file into an array  
  apache_note(string note_name [, string note_value]); string -- Get and set Apache request notes  
  apache_request_headers(); array
  apache_response_headers(); array -- Fetch all HTTP response headers  
  apache_setenv(string variable, string value [, bool walk_to_top]); int -- Set an Apache subprocess_env variable  
  ascii2ebcdic(string ascii_str); int
  ebcdic2ascii(string ebcdic_str); int
  getallheaders(); array -- Fetch all HTTP request headers  
  virtual(string filename); int -- Perform an apache sub-request  
  array_change_key_case(array input [, int case]); array -- Retuns an array with all string keys lowercased [or uppercased]  
  array_chunk(array input, int size [, bool preserve_keys]); array -- Split array into chunks  
  array_count_values(array input); array -- Return the value as key and the frequency of that value in input as value  
  array_diff(array array1, array array2 [, array ...]); array -- Returns the entries of arr1 that have values which are not present in any of the others arguments  
  array_fill(int start_index, int num, mixed value); array -- Create an array containing num elements starting with index start_key each initialized to val  
  array_filter(array input [, mixed callback]); array -- Filters elements from the array via the callback.  
  array_flip(array trans); array -- Return array with key <-> value flipped  
  array_intersect(array array1, array array2 [, array ...]); array -- Returns the entries of arr1 that have values which are present in all the other arguments  
  array_key_exists(mixed key, array search); bool -- Return the key of the element currently pointed to by the internal array pointer  
  array_keys(array input [, mixed search_value]); array -- Return just the keys from the input array, optionally only for the specified search_value  
  array_map(mixed callback, array arr1 [, array arr2...]); array -- Applies the callback to the elements in given arrays.  
  array_merge_recursive(array array1, array array2 [, array ...]); array -- Recursively merges elements from passed arrays into one array  
  array_merge(array array1, array array2 [, array ...]); array -- Merges elements from passed arrays into one array  
  array_multisort(array ar1 [, mixed arg [, mixed ... [, array ...]]]); bool -- Sort multiple arrays at once similar to how ORDER BY clause works in SQL  
  array_pad(array input, int pad_size, mixed pad_value); array -- Returns a copy of input array padded with pad_value to size pad_size  
  array_pop(array array); mixed -- Pops an element off the end of the array  
  array_push(array array, mixed var [, mixed ...]); int -- Pushes elements onto the end of the array  
  array_rand(array input [, int num_req]); mixed -- Return key/keys for random entry/entries in the array  
  array_reduce(array input, mixed callback [, int initial]); mixed -- Iteratively reduce the array to a single value via the callback.  
  array_reverse(array array [, bool preserve_keys]); array -- Return input as a new array with the order of the entries reversed  
  array_search(mixed needle, array haystack [, bool strict]); mixed -- Searches the array for a given value and returns the corresponding key if successful  
  array_shift(array array); mixed -- Pops an element off the beginning of the array  
  array_slice(array array, int offset [, int length]); array -- Returns elements specified by offset and length  
  array_splice(array input, int offset [, int length [, array replacement]]); array -- Removes the elements designated by offset and length and replace them with supplied array  
  array_sum(array array); mixed -- Returns the sum of the array entries  
  array_unique(array array); array -- Removes duplicate values from array  
  array_unshift(array array, mixed var [, mixed ...]); int -- Pushes elements onto the beginning of the array  
  array_values(array input); array -- Return just the values from the input array  
  array_walk(array array, string func [, mixed userdata]); int -- Apply a user function to every member of an array  
  array([mixed ...]); array
  arsort(array array [, int sort_flags]); void -- Sort an array  
  asort(array array [, int sort_flags]); void -- Sort an array  
  compact(mixed varname [, mixed ...]); array -- Creates a hash containing variables and their values  
  count(mixed var); int -- Count the number of elements in a variable (usually an array)  
  current(array array); mixed -- Return the element currently pointed to by the internal array pointer  
  each(array array); array -- Return the currently pointed key..value pair in the passed array, and advance the pointer to the next element  
  end(array array); mixed -- Advances array argument's internal pointer to the last element and return it  
  extract(array var_array [, int extract_type [, string prefix]]); int -- Imports variables into symbol table from an array  
  in_array(mixed needle, array haystack [, bool strict]); bool -- Checks if the given value exists in the array  
  key(array array); mixed -- Return the key of the element currently pointed to by the internal array pointer  
  krsort(array array [, int sort_flags]); int -- Sort an array  
  ksort(array array [, int sort_flags]); int -- Sort an array  
  list(mixed ...); void
  natcasesort(array array); void -- Sort an array using case-insensitive natural sort  
  natsort(array array); void -- Sort an array using natural sort  
  next(array array); mixed -- Move array argument's internal pointer to the next element and return it  
  pos(array array); mixed
  prev(array array); mixed -- Move array argument's internal pointer to the previous element and return it  
  range(mixed low, mixed high); array -- Create an array containing the range of integers or characters from low to high (inclusive)  
  reset(array array); mixed -- Set array argument's internal pointer to the first element and return it  
  rsort(array array [, int sort_flags]); void -- Sort an array  
  shuffle(array array); void -- Randomly shuffle the contents of an array  
  sizeof(mixed var); int
  sort(array array [, int sort_flags]); void -- Sort an array  
  uasort(array array, function cmp_function); void -- Sort an array with a user-defined comparison function and maintain index association  
  uksort(array array, function cmp_function); void -- Sort an array by keys using a user-defined comparison function  
  usort(array array, string cmp_function); void -- Sort an array by values using a user-defined comparison function  
  aspell_check_raw(int dictionary_link, string word); bool
  aspell_check(int dictionary_link, string word); bool
  aspell_new(string master [, string personal]); int
  aspell_suggest(int dictionary_link, string word); array
  bcadd(string left_operand, string right_operand [, int scale]); string -- Returns the sum of two arbitrary precision numbers  
  bccomp(string left_operand, string right_operand [, int scale]); int -- Compares two arbitrary precision numbers  
  bcdiv(string left_operand, string right_operand [, int scale]); string -- Returns the quotient of two arbitrary precision numbers (division)  
  bcmod(string left_operand, string modulus); string -- Returns the modulus of the two arbitrary precision operands  
  bcmul(string left_operand, string right_operand [, int scale]); string -- Returns the multiplication of two arbitrary precision numbers  
  bcpow(string x, string y [, int scale]); string -- Returns the value of an arbitrary precision number raised to the power of another  
  bcscale(int scale); string -- Sets default scale parameter for all bc math functions  
  bcsqrt(string operand [, int scale]); string -- Returns the square root of an arbitray precision number  
  bcsub(string left_operand, string right_operand [, int scale]); string -- Returns the difference between two arbitrary precision numbers  
  bzclose(resource bz); int
  bzcompress(string source [, int blocksize [, int workfactor]]); string -- Compresses a string into BZip2 encoded data  
  bzdecompress(string source [, int small]); string -- Decompresses BZip2 compressed data  
  bzerrno(resource bz); int -- Returns the error number  
  bzerror(resource bz); array -- Returns the error number and error string in an associative array  
  bzerrstr(resource bz); string -- Returns the error string  
  bzflush(resource bz); int
  bzopen(string filename, string mode); resource -- Read entire file into an array  
  bzread(resource bz [, int length]); string -- Reads up to length bytes from a BZip2 stream, or 1024 bytes if length is not specified  
  bzwrite(resource bz, string data [, int length]); int
  cal_days_in_month(int calendar, int month, int year); int -- Returns the number of days in a month for a given year and calendar  
  cal_from_jd(int jd, int calendar); array -- Converts from Julian Day Count to a supported calendar and return extended information  
  cal_info(int calendar); array -- Returns information about a particular calendar  
  cal_to_jd(int calendar, int month, int day, int year); int -- Converts from a supported calendar to Julian Day Count  
  easter_date([int year]); int -- Return the timestamp of midnight on Easter of a given year (defaults to current year)  
  easter_days([int year [, int method]]); int -- Return the number of days after March 21 that Easter falls on for a given year (defaults to current year)  
  frenchtojd(int month, int day, int year); int -- Converts a french republic calendar date to julian day count  
  gregoriantojd(int month, int day, int year); int -- Converts a gregorian calendar date to julian day count  
  jddayofweek(int julianday, int mode); mixed -- Returns name or number of day of week from julian day count  
  jdmonthname(int julianday, int mode); string -- Returns name of month for julian day count  
  jdtofrench(int juliandaycount); string -- Converts a julian day count to a french republic calendar date  
  jdtogregorian(int julianday); string -- Converts a julian day count to a gregorian calendar date  
  jdtojewish(int julianday); string -- Converts a julian day count to a jewish calendar date  
  jdtojulian(int julianday); string -- Convert a julian day count to a julian calendar date  
  jdtounix(int jday); int -- Convert Julian Day to UNIX timestamp  
  jewishtojd(int month, int day, int year); int -- Converts a jewish calendar date to a julian day count  
  juliantojd(int month, int day, int year); int -- Converts a julian calendar date to julian day count  
  unixtojd([int timestamp]); int -- Return current UNIX timestamp  
  ccvs_add(string session, string invoice, string argtype, string argval); string
  ccvs_auth(string session, string invoice); string
  ccvs_command(string session, string type, string argval); string
  ccvs_count(string session, string type); int
  ccvs_delete(string session, string invoice); string
  ccvs_done(string sess); string
  ccvs_init(string name); string
  ccvs_lookup(string session, string invoice, int inum); string
  ccvs_new(string session, string invoice); string
  ccvs_report(string session, string type); string
  ccvs_return(string session, string invoice); string
  ccvs_reverse(string session, string invoice); string
  ccvs_sale(string session, string invoice); string
  ccvs_status(string session, string invoice); string
  ccvs_textvalue(string session); string
  ccvs_void(string session, string invoice); string
  call_user_method_array(string method_name, object obj [, array paramarr]); mixed -- Call a user method on a specific object or class using a parameter array  
  call_user_method(string method_name, object obj [, mixed parameter [, mixed ...]]); mixed -- Call a user method on a specific object or class  
  class_exists(string class_name); bool -- Checks if the class exists  
  get_class_methods(mixed class_name); array -- Returns an array of method names for class or class instance.  
  get_class_vars(string class_name); array -- Returns an array of default properties of the class  
  get_class(object obj); string -- Retrieves the class name  
  get_declared_classes(); array -- Returns an array of all declared classes.  
  get_object_vars(object obj); array -- Returns an array of object properties  
  get_parent_class(mixed obj); string -- Retrieves the parent class name for object or class.  
  is_a(object object, string class_name); bool -- Returns true if the object is of this class or has this class as one of its parents  
  is_subclass_of(object object, string class_name); bool -- Returns true if the object has this class as one of its parents  
  method_exists(object object, string method_name); bool -- Checks if the class method exists  
  COM;;COM(string module_name [, string server_name [, int codepage]]); string
  VARIANT;;VARIANT([mixed value [, int type [, int codepage]]]); string
  com_addref(); void -- Increases the reference counter on a COM object  
  com_get(resource com_object, string property); mixed
  com_invoke(resource com_object, string function_name [, mixed function parameters, ...]); mixed -- Invokes a COM module  
  com_isenum(object com_module); void -- Grabs an IEnumVariant  
  com_load_typelib(string typelib_name [, int case_insensitive]); void -- Loads a Typelib  
  com_load(string module name [, string server name [, int codepage]]); string -- Loads a COM module  
  com_propget(resource com_object, string property); mixed -- Gets properties from a COM module  
  com_propput(resource com_object, string property, mixed value); void -- Puts the properties for a module  
  com_propset(resource com_object, string property, mixed value); void
  com_release(); void -- Releases a COM object  
  com_set(resource com_object, string property, mixed value); void
  cpdf_add_annotation(int pdf document, float llx, float lly, float urx, float ury, string title, string content [, int mode]); void -- Sets annotation  
  cpdf_add_outline(int pdf document, string text); void -- Adds outline  
  cpdf_arc(int pdf document, float x-coor, float y-coor, float radius, float start, float end [, int mode]); void -- Advances array argument's internal pointer to the last element and return it  
  cpdf_begin_text(int pdf document); void -- Starts text section  
  cpdf_circle(int pdf document, float x-coor, float y-coor, float radius [, int mode]); void -- Draws a circle  
  cpdf_clip(int pdf document); void -- Clips to current path  
  cpdf_close(int pdf document); void -- Closes the pdf document  
  cpdf_closepath_fill_stroke(int pdf document); void -- Close, fill and stroke current path  
  cpdf_closepath_stroke(int pdf document); void -- Close path and draw line along path  
  cpdf_closepath(int pdf document); void -- Close path  
  cpdf_continue_text(int pdf document, string text); void -- Outputs text in next line  
  cpdf_curveto(int pdf document, float x1, float y1, float x2, float y2, float x3, float y3 [, int mode]); void -- Draws a curve  
  cpdf_end_text(int pdf document); void -- Ends text section  
  cpdf_fill_stroke(int pdf document); void -- Fills and stroke current path  
  cpdf_fill(int pdf document); void -- Fills current path  
  cpdf_finalize_page(int pdf document, int page number); void -- Ends the page to save memory  
  cpdf_finalize(int pdf document); void -- Creates PDF doc in memory  
  cpdf_global_set_document_limits(int maxpages, int maxfonts, int maximages, int maxannotations, int maxobjects); void -- Return the highest value in an array or a series of arguments  
  cpdf_import_jpeg(int pdf document, string file name, float x-coor, float y-coor, float angle, float width, float height, float x-scale, float y-scale [, int mode]); int -- Read entire file into an array  
  cpdf_lineto(int pdf document, float x-coor, float y-coor [, int mode]); void -- Draws a line  
  cpdf_moveto(int pdf document, float x-coor, float y-coor [, int mode]); void -- Sets current point  
  cpdf_newpath(int pdf document); void -- Starts new path  
  cpdf_open(int compression [, string filename]); int -- Read entire file into an array  
  cpdf_output_buffer(int pdf document); void -- Returns the internal memory stream as string  
  cpdf_page_init(int pdf document, int page number, int orientation, float height, float width [, float unit]); void -- Starts page  
  cpdf_place_inline_image(int pdf document, int image, float x-coor, float y-coor, float angle, float width, float height [, int mode]); void -- Includes image  
  cpdf_rect(int pdf document, float x-coor, float y-coor, float width, float height [, int mode]); void -- Draws a rectangle  
  cpdf_restore(int pdf document); void -- Restores formerly saved enviroment  
  cpdf_rlineto(int pdf document, float x-coor, float y-coor [, int mode]); void -- Draws a line relative to current point  
  cpdf_rmoveto(int pdf document, float x-coor, float y-coor [, int mode]); void -- Sets current point  
  cpdf_rotate_text(int pdfdoc, float angle); void -- Sets text rotation angle  
  cpdf_rotate(int pdf document, float angle); void -- Sets rotation  
  cpdf_save_to_file(int pdf document, string filename); void -- Read entire file into an array  
  cpdf_save(int pdf document); void -- Saves current enviroment  
  cpdf_scale(int pdf document, float x-scale, float y-scale); void -- Sets scaling  
  cpdf_set_action_url(int pdfdoc, float xll, float yll, float xur, float xur, string url [, int mode]); void -- Sets hyperlink  
  cpdf_set_char_spacing(int pdf document, float space); void -- Sets character spacing  
  cpdf_set_creator(string creator); void -- Sets the creator field  
  cpdf_set_current_page(int pdf document, int page number); void -- Sets page for output  
  cpdf_set_font_directories(int pdfdoc, string pfmdir, string pfbdir); void -- Sets directories to search when using external fonts  
  cpdf_set_font_map_file(int pdfdoc, string filename); void -- Read entire file into an array  
  cpdf_set_font(int pdf document, string font name, float size, string encoding); void -- Selects the current font face, size and encoding  
  cpdf_set_horiz_scaling(int pdf document, float scale); void -- Sets horizontal scaling of text  
  cpdf_set_keywords(string keywords); void -- Return the key of the element currently pointed to by the internal array pointer  
  cpdf_set_leading(int pdf document, float distance); void -- Sets distance between text lines  
  cpdf_set_page_animation(int pdf document, int transition, float duration); void -- Sets transition between pages  
  cpdf_set_subject(string subject); void -- Fills the subject field of the info structure  
  cpdf_set_text_matrix(int pdf document, array matrix); void -- Sets the text matrix  
  cpdf_set_text_pos(int pdf document, float x-coor, float y-coor [, int mode]); void -- Sets the position of text for the next cpdf_show call  
  cpdf_set_text_rendering(int pdf document, int mode); void -- Determines how text is rendered  
  cpdf_set_text_rise(int pdf document, float value); void -- Sets the text rise  
  cpdf_set_title(string title); void -- Fills the title field of the info structure  
  cpdf_set_viewer_preferences(int pdfdoc, array preferences); void -- How to show the document in the viewer  
  cpdf_set_word_spacing(int pdf document, float space); void -- Sets spacing between words  
  cpdf_setdash(int pdf document, float white, float black); void -- Sets dash pattern  
  cpdf_setflat(int pdf document, float value); void -- Sets flatness  
  cpdf_setgray_fill(int pdf document, float value); void -- Sets filling color to gray value  
  cpdf_setgray_stroke(int pdf document, float gray value); void -- Sets drawing color to gray value  
  cpdf_setgray(int pdf document, float gray value); void -- Sets drawing and filling color to gray value  
  cpdf_setlinecap(int pdf document, int value); void -- Sets linecap parameter  
  cpdf_setlinejoin(int pdf document, long value); void -- Sets linejoin parameter  
  cpdf_setlinewidth(int pdf document, float width); void -- Sets line width  
  cpdf_setmiterlimit(int pdf document, float value); void -- Sets miter limit  
  cpdf_setrgbcolor_fill(int pdf document, float red value, float green value, float blue value); void -- Sets filling color to rgb color value  
  cpdf_setrgbcolor_stroke(int pdf document, float red value, float green value, float blue value); void -- Sets drawing color to RGB color value  
  cpdf_setrgbcolor(int pdf document, float red value, float green value, float blue value); void -- Sets drawing and filling color to RGB color value  
  cpdf_show_xy(int pdf document, string text, float x-coor, float y-coor [, int mode]); void -- Output text at position  
  cpdf_show(int pdf document, string text); void -- Output text at current position  
  cpdf_stringwidth(int pdf document, string text); float -- Returns width of text in current font  
  cpdf_stroke(int pdf document); void -- Draws line along path path  
  cpdf_text(int pdf document, string text, float x-coor, float y-coor [, int mode [, float orientation [, int alignmode]]]); void -- Outputs text  
  cpdf_translate(int pdf document, float x-coor, float y-coor [, int mode]); void -- Sets origin of coordinate system  
  crack_check([resource dictionary, string password]); bool -- Performs an obscure check with the given password  
  crack_closedict([resource dictionary]); bool -- Closes an open cracklib dictionary  
  crack_getlastmessage(); string -- Returns the message from the last obscure check  
  crack_opendict(string dictionary); resource -- Opens a new cracklib dictionary  
  ctype_alnum(string text); bool -- Checks for alphanumeric character(s)  
  ctype_alpha(string text); bool -- Checks for alphabetic character(s)  
  ctype_cntrl(string text); bool -- Checks for control character(s)  
  ctype_digit(string text); bool -- Checks for numeric character(s)  
  ctype_graph(string text); bool -- Checks for any printable character(s) except space  
  ctype_lower(string text); bool -- Checks for lowercase character(s)   
  ctype_print(string text); bool -- Checks for printable character(s)  
  ctype_punct(string text); bool -- Checks for any printable character which is not whitespace or an alphanumeric character  
  ctype_space(string text); bool -- Checks for whitespace character(s) 
  ctype_upper(string text); bool -- Checks for uppercase character(s)  
  ctype_xdigit(string text); bool -- Checks for character(s) representing a hexadecimal digit  
  curl_close(resource ch); void -- Close a CURL session  
  curl_errno(resource ch); int -- Return an integer containing the last error number  
  curl_error(resource ch); string -- Return a string contain the last error for the current session  
  curl_exec(resource ch); bool -- Perform a CURL session  
  curl_getinfo(resource ch, int opt); string -- Get information regarding a specific transfer  
  curl_init([string url]); resource -- Initialize a CURL session  
  curl_setopt(resource ch, string option, mixed value); bool -- Set an option for a CURL transfer  
  curl_version(); string -- Return cURL version information.  
  cybercash_base64_decode(string inbuff); string
  cybercash_base64_encode(string inbuff); string
  cybercash_decr(string wmk, string sk, string inbuff); array
  cybercash_encr(string wmk, string sk, string inbuff); array
  cybermut_creerformulairecm(string url_CM, string version, string TPE, string montant, string ref_commande, string texte_libre, string url_retour, string url_retour_ok, string url_retour_err, string langue, string code_societe, string texte_bouton); string
  cybermut_creerreponsecm(string phrase); string
  cybermut_testmac(string code_MAC, string version, string TPE, string cdate, string montant, string ref_commande, string texte_libre, string code-retour); bool
  cyrus_authenticate(resource connection [, string mechlist [, string service [, string user [, int minssf [, int maxssf]]]]]); bool -- Return the lowest value in an array or a series of arguments  
  cyrus_bind(resource connection, array callbacks); bool -- Bind callbacks to a Cyrus IMAP connection  
  cyrus_close(resource connection); bool -- Close connection to a cyrus server  
  cyrus_connect([string host [, string port [, int flags]]]); resource -- Connect to a Cyrus IMAP server  
  cyrus_query(resource connection, string query); bool -- Send a query to a Cyrus IMAP server  
  cyrus_unbind(resource connection, string trigger_name); bool -- Unbind ...  
  checkdate(int month, int day, int year); bool -- Returns true(1) if it is a valid date in gregorian calendar  
  date(string format [, int timestamp]); string -- Return current UNIX timestamp  
  getdate([int timestamp]); array -- Return current UNIX timestamp  
  gettimeofday(); array -- Returns the current time as array  
  gmdate(string format [, int timestamp]); string -- Return current UNIX timestamp  
  gmmktime(int hour, int minute, int second, int month, int day, int year [, int is_dst]); int -- Get UNIX timestamp for a GMT date  
  gmstrftime(string format [, int timestamp]); string -- Return current UNIX timestamp  
  localtime([int timestamp [, bool is_associative]]); array -- Returns true if the object is of this class or has this class as one of its parents  
  microtime(); string -- Returns a string containing the current time in seconds and microseconds  
  mktime(int hour, int minute, int second, int month, int day, int year [, int is_dst]); int -- Get UNIX timestamp for a date  
  strftime(string format [, int timestamp]); string -- Return current UNIX timestamp  
  strtotime(string time [, int now]); int -- Return current UNIX timestamp  
  time(); int -- Return current UNIX timestamp  
  dba_close(resource handle); void -- Closes database  
  dba_delete(string key, resource handle); bool -- Return the key of the element currently pointed to by the internal array pointer  
  dba_exists(string key, resource handle); bool -- Return the key of the element currently pointed to by the internal array pointer  
  dba_fetch(string key, resource handle); string -- Return the key of the element currently pointed to by the internal array pointer  
  dba_firstkey(resource handle); string -- Resets the internal key pointer and returns the first key  
  dba_insert(string key, string value, resource handle); bool -- Return the key of the element currently pointed to by the internal array pointer  
  dba_nextkey(resource handle); string -- Returns the next key  
  dba_open(string path, string mode, string handler [, ...]); resource -- Opens path using the specified handler in mode 
  dba_optimize(resource handle); bool -- Optimizes (e.g. clean up, vacuum) database  
  dba_popen(string path, string mode, string handler [, ...]); resource -- Opens path using the specified handler in mode persistently  
  dba_replace(string key, string value, resource handle); bool -- Return the key of the element currently pointed to by the internal array pointer  
  dba_sync(resource handle); bool -- Synchronizes database  
  dbase_add_record(int dbase_identifier, array record); bool -- Adds a record to the database  
  dbase_close(int dbase_identifier); bool -- Closes an open dBase-format database file  
  dbase_create(string filename, array fields); int -- Read entire file into an array  
  dbase_delete_record(int dbase_identifier, int record); bool -- Marks a record to be deleted  
  dbase_get_record_with_names(int dbase_identifier, int record); array -- Returns an associative array representing a record from the database  
  dbase_get_record(int dbase_identifier, int record); array -- Returns an array representing a record from the database  
  dbase_numfields(int dbase_identifier); int -- Returns the number of fields (columns) in the database  
  dbase_numrecords(int dbase_identifier); int -- Returns the number of records in the database  
  dbase_open(string filename, int flags); int -- Read entire file into an array  
  dbase_pack(int dbase_identifier); bool -- Packs the database (deletes records marked for deletion)  
  dbase_replace_record(int dbase_identifier, array record, int dbase_record_number); bool -- Replaces a record to the database  
  dblist(); string -- Return an associative array id->filename  
  dbmclose(resource dbm_identifier); bool -- Closes a dbm database  
  dbmdelete(resource dbm_identifier, string key); bool -- Return the key of the element currently pointed to by the internal array pointer  
  dbmexists(resource dbm_identifier, string key); bool -- Return the key of the element currently pointed to by the internal array pointer  
  dbmfetch(resource dbm_identifier, string key); string -- Return the key of the element currently pointed to by the internal array pointer  
  dbmfirstkey(resource dbm_identifier); string -- Retrieves the first key from a dbm database  
  dbminsert(resource dbm_identifier, string key, string value); int -- Return the key of the element currently pointed to by the internal array pointer  
  dbmnextkey(resource dbm_identifier, string key); string -- Return the key of the element currently pointed to by the internal array pointer  
  dbmopen(string filename, string flags); resource -- Read entire file into an array  
  dbmreplace(resource dbm_identifier, string key, string value); int -- Return the key of the element currently pointed to by the internal array pointer  
  dbplus_add(resource relation, array tuple); int
  dbplus_aql(string query [, string server [, string dbpath]]); resource
  dbplus_chdir([string newdir]); string
  dbplus_close(resource relation); int
  dbplus_curr(resource relation, array tuple); int
  dbplus_errcode(int errno); string
  dbplus_errno(); int
  dbplus_find(resource relation, array constraints, mixed tuple); int
  dbplus_first(resource relation, array tuple); int
  dbplus_flush(resource relation); int
  dbplus_freealllocks(); int
  dbplus_freelock(resource relation, string tname); int
  dbplus_freerlocks(resource relation); int
  dbplus_getlock(resource relation, string tname); int
  dbplus_getunique(resource relation, int uniqueid); int
  dbplus_info(resource relation, string key, array); int -- Return the key of the element currently pointed to by the internal array pointer  
  dbplus_last(resource relation, array tuple); int
  dbplus_lockrel(resource relation); int
  dbplus_next(resource relation, array); int
  dbplus_open(string name); resource
  dbplus_prev(resource relation, array tuple); int
  dbplus_rchperm(resource relation, int mask, string user, string group); int
  dbplus_rcreate(string name, mixed domlist [, boolean overwrite]); resource
  dbplus_rcrtexact(string name, resource relation, boolean overwrite); resource
  dbplus_rcrtlike(string name, resource relation, int flag); resource
  dbplus_resolve(string relation_name); int
  dbplus_restorepos(resource relation, array tuple); int
  dbplus_rkeys(resource relation, mixed domlist); resource
  dbplus_ropen(string name); resource
  dbplus_rquery(string query, string dbpath); int
  dbplus_rrename(resource relation, string name); int
  dbplus_rsecindex(resource relation, mixed domlist, int type); resource
  dbplus_runlink(resource relation); int
  dbplus_rzap(resource relation); int
  dbplus_savepos(resource relation); int
  dbplus_setindex(resource relation, string idx_name); int
  dbplus_setindexbynumber(resource relation, int idx_number); int
  dbplus_sql(string query, string server, string dbpath); resource
  dbplus_tcl(int sid, string script); int
  dbplus_tremove(resource relation, array tuple [, array current]); int -- Return the element currently pointed to by the internal array pointer  
  dbplus_undo(resource relation); int
  dbplus_undoprepare(resource relation); int
  dbplus_unlockrel(resource relation); int
  dbplus_unselect(resource relation); int
  dbplus_update(resource relation, array old, array new); int
  dbplus_xlockrel(resource relation); int
  dbplus_xunlockrel(resource relation); int
  dbx_close(object link_identifier); bool -- Create a hard link  
  dbx_compare(array row_a, array row_b, string column_key [, int flags]); int -- Returns row_y[columnname] - row_x[columnname], converted to -1, 0 or 1  
  dbx_connect(mixed module, string host, string database, string username, string password [, int persistent]); object -- Returns a dbx_link_object on success and returns 0 on failure  
  dbx_error(object link_identifier); string -- Create a hard link  
  dbx_query(object link_identifier, string sql_statement [, long flags]); object -- Create a hard link  
  dbx_sort(object result, string user_compare_function); bool -- Returns 0 on failure, 1 on success  
  dio_close(resource fd); void -- Close the file descriptor given by fd  
  dio_fcntl(resource fd, int cmd [, mixed arg]); mixed -- Perform a c library fcntl on fd  
  dio_open(string filename, int flags [, int mode]); resource -- Read entire file into an array  
  dio_read(resource fd [, int n]); string -- Read n bytes from fd and return them, if n is not specified, read 1k  
  dio_seek(resource fd, int pos, int whence); int -- Seek to pos on fd from whence  
  dio_stat(resource fd); array -- Get stat information about the file descriptor fd  
  dio_tcsetattr(resource fd, array options); -- Perform a c library tcsetattr on fd  
  dio_truncate(resource fd, int offset); bool -- Truncate file descriptor fd to offset bytes  
  dio_write(resource fd, string data [, int len]); int -- Write data to fd with optional truncation at length  
  chdir(string directory); bool -- Directory class with properties, handle and class and methods read, rewind and close  
  chroot(string directory); bool -- Converts ASCII code to a character  
  closedir(resource dir_handle); void -- Directory class with properties, handle and class and methods read, rewind and close  
  getcwd(); string -- Gets the current directory  
  opendir(string path); resource -- Open a directory and return a dir_handle  
  readdir(resource dir_handle); string -- Read directory entry from dir_handle  
  rewinddir(resource dir_handle); void -- Rewind the position of a file pointer  
  name(); bool, class DomAttribute
  specified(); bool, class DomAttribute
  value(); bool, class DomAttribute
  add_root(string name); resource, class DomDocument
  create_attribute(string name, string value); object, class DomDocument
  create_cdata_section(string content); string, class DomDocument
  create_comment(string content); object, class DomDocument
  create_element_ns(string uri, string name [, string prefix]); object, class DomDocument
  create_element(string name); object, class DomDocument
  create_entity_reference(string content); object, class DomDocument
  create_processing_instruction(string content); string, class DomDocument
  create_text_node(string content); object, class DomDocument
  doctype(); object, class DomDocument
  document_element(); object, class DomDocument
  dump_file(string filename [, bool compressionmode [, bool format]]); string, class DomDocument -- Read entire file into an array  
  dump_mem([bool format [, string encoding]]); string, class DomDocument
  get_element_by_id(string id); object, class DomDocument
  get_elements_by_tagname(string name); array, class DomDocument
  html_dump_mem(); string, class DomDocument
  xinclude(); int, class DomDocument
  entities(); array, class DomDocumentType
  internal_subset(); bool, class DomDocumentType
  name(); string, class DomDocumentType
  notations(); array, class DomDocumentType
  public_id(); string, class DomDocumentType
  system_id(); string, class DomDocumentType -- Execute an external program and display output  
  get_attribute_node(object attr); object, class DomElement
  get_attribute(string name); object, class DomElement
  get_elements_by_tagname(string name); bool, class DomElement
  has_attribute(string name); bool, class DomElement
  remove_attribute(string name); bool, class DomElement
  set_attribute(string name, string value); bool, class DomElement
  tagname(); string, class DomElement
  add_namespace(string uri, string prefix); bool, class DomNode
  append_child(object newnode); object, class DomNode
  append_sibling(object newnode); object, class DomNode
  attributes(); array, class DomNode
  child_nodes(); array, class DomNode
  clone_node(); object, class DomNode
  dump_node(); string, class DomNode
  first_child(); bool, class DomNode
  get_content(); string, class DomNode
  has_attributes(); bool, class DomNode
  has_child_nodes(); bool, class DomNode
  insert_before(object newnode, object refnode); object, class DomNode
  is_blank_node(); bool, class DomNode
  last_child(); object, class DomNode
  next_sibling(); object, class DomNode -- Move array argument's internal pointer to the next element and return it  
  node_name(); string, class DomNode
  node_type(); int, class DomNode
  node_value(); string, class DomNode
  owner_document(); object, class DomNode
  parent_node(); object, class DomNode
  prefix(); string, class DomNode
  previous_sibling(); object, class DomNode -- Move array argument's internal pointer to the previous element and return it  
  remove_child(object oldchild); object, class DomNode
  replace_child(object oldnode, object newnode); object, class DomNode
  replace_node(object newnode); object, class DomNode
  set_content(); bool, class DomNode
  set_name(); bool, class DomNode
  set_namespace(string uri [, string prefix]); void, class DomNode
  unlink_node(); object, class DomNode -- Delete a file  
  data(); string, class DomProcessingInstruction
  target(); string, class DomProcessingInstruction
  domxml_new_doc(string version); object
  domxml_open_file(string filename); object -- Read entire file into an array  
  domxml_open_mem(string str); object
  domxml_version(); string -- Get XML library version  
  domxml_xmltree(string str); object -- Creates a tree of PHP objects from an XML document  
  domxml_xslt_stylesheet_doc(object DocDocument Object); object -- Creates XSLT Stylesheet object from DOM Document object  
  domxml_xslt_stylesheet_file(string xsl file); object -- Read entire file into an array  
  domxml_xslt_stylesheet(string xsl document); object -- Creates XSLT Stylesheet object from string  
  process(object DomDocument [, array xslt_parameters [, bool param_is_xpath]]); object, class DomXsltStylesheet
  xpath_eval_expression(object xpath_context); array -- Evaluates the XPath expression in the given string  
  xpath_eval(object xpath context); array -- Evaluates the XPath Location Path in the given string  
  xpath_new_context(object dom document); object -- Creates new XPath context  
  xptr_eval([object xpath_context, string eval_str]); int -- Evaluates the XPtr Location Path in the given string  
  xptr_new_context([object doc_handle]); string -- Creates new XPath context  
  dotnet_load(string assembly_name [, string datatype_name [, int codepage]]); int
  error_log(string message [, int message_type [, string destination [, string extra_headers]]]); int -- Send an error message somewhere  
  error_reporting([int level]); int -- Return the current error_reporting level, and if an argument was passed - change to the new level  
  restore_error_handler(); void -- Restores the previously defined error handler function  
  set_error_handler(string error_handler); string -- Sets a user-defined error handler function.  Returns the previously defined error handler, or false on error  
  trigger_error(string error_msg [, int error_type]); void -- Generates a user-level error/warning/notice message  
  user_error(string error_msg [, int error_type]); void
  escapeshellarg(string arg); string -- Quote and escape an argument for use in a shell command  
  escapeshellcmd(string command); string -- Escape shell metacharacters  
  exec(string command [, array output [, int return_var]]); string -- Execute an external program  
  passthru(string command [, int return_var]); void -- Execute an external program and display raw output  
  proc_close(resource process); int -- close a process opened by proc_open  
  proc_open(string cmd, array descriptorspec, array pipes); resource -- Returns an approximation of pi  
  shell_exec(string cmd); string -- Use pclose() for FILE* that has been opened via popen()  
  system(string command [, int return_var]); string -- Execute an external program and display output  
  fbsql_affected_rows([resource link_identifier]); int -- Create a hard link  
  fbsql_autocommit(resource link_identifier [, bool OnOff]); bool -- Create a hard link  
  fbsql_change_user(string user, string password [, string database [, resource link_identifier]]); resource -- Create a hard link  
  fbsql_close([resource link_identifier]); boolean -- Create a hard link  
  fbsql_commit([resource link_identifier]); bool -- Create a hard link  
  fbsql_connect([string hostname [, string username [, string password]]]); resource -- Create a connection to a database server  
  fbsql_create_blob(string blob_data [, resource link_identifier]); string -- Create a hard link  
  fbsql_create_clob(string clob_data [, resource link_identifier]); string -- Create a hard link  
  fbsql_create_db(string database name [, resource link_identifier]); bool -- Create a hard link  
  fbsql_data_seek(resource result_identifier, int row_number); bool -- Move the internal row counter to the specified row_number  
  fbsql_database_password(resource link_identifier [, string database_password]); string -- Create a hard link  
  fbsql_database(resource link_identifier [, string database]); string -- Create a hard link  
  fbsql_db_query(string database, string query [, resource link_identifier]); resource -- Create a hard link  
  fbsql_db_status(string database_name [, resource link_identifier]); int -- Create a hard link  
  fbsql_drop_db(string database_name [, resource link_identifier]); bool -- Create a hard link  
  fbsql_errno([resource link_identifier]); int -- Create a hard link  
  fbsql_error([resource link_identifier]); string -- Create a hard link  
  fbsql_fetch_array(resource result [, int result_type]); array -- Fetches a result row as an array (associative, numeric or both) 
  fbsql_fetch_assoc(resource result); array -- Detch a row of data. Returns an assoc array  
  fbsql_fetch_field(resource result [, int field_offset]); object -- Get the field properties for a specified field_index  
  fbsql_fetch_lengths([resource result]); array -- Returns an array of the lengths of each column in the result set  
  fbsql_fetch_object(resource result [, int result_type]); object -- Fetch a row of data. Returns an object  
  fbsql_fetch_row(resource result); array -- Fetch a row of data. Returns an indexed array  
  fbsql_field_flags(resource result, int field_offset); string -- ???  
  fbsql_field_len(resource result, int field_offset); int -- Get the column length for a specified field_index  
  fbsql_field_name(resource result, int field_index); string -- Get the column name for a specified field_index  
  fbsql_field_seek(resource result, int field_offset); bool -- ???  
  fbsql_field_table(resource result, int field_offset); string -- Get the table name for a specified field_index  
  fbsql_field_type(resource result, int field_offset); string -- Get the field type for a specified field_index  
  fbsql_free_result(resource result); bool -- free the memory used to store a result  
  fbsql_get_autostart_info([resource link_identifier]); array -- Create a hard link  
  fbsql_hostname(resource link_identifier [, string host_name]); string -- Create a hard link  
  fbsql_insert_id([resource link_identifier]); int -- Create a hard link  
  fbsql_list_dbs([resource link_identifier]); resource -- Create a hard link  
  fbsql_list_fields(string database_name, string table_name [, resource link_identifier]); resource -- Create a hard link  
  fbsql_list_tables(string database [, resource link_identifier]); resource -- Create a hard link  
  fbsql_next_result(resource result_id); bool -- Switch to the next result if multiple results are available  
  fbsql_num_fields(resource result); int -- Get number of fields in the result set  
  fbsql_num_rows(resource result); int -- Get number of rows  
  fbsql_password(resource link_identifier [, string password]); string -- Create a hard link  
  fbsql_pconnect([string hostname [, string username [, string password]]]); resource -- Create a persistant connection to a database server  
  fbsql_query(string query [, resource link_identifier]); resource -- Create a hard link  
  fbsql_read_blob(string blob_handle [, resource link_identifier]); string -- Create a hard link  
  fbsql_read_clob(string clob_handle [, resource link_identifier]); string -- Create a hard link  
  fbsql_result(resource result, int row [, mixed field]); mixed -- ???  
  fbsql_rollback([resource link_identifier]); bool -- Create a hard link  
  fbsql_select_db(string database_name [, resource link_identifier]); bool -- Create a hard link  
  fbsql_set_lob_mode(resource result, string database_name); bool -- Sets the mode for how LOB data re retreived (actual data or a handle)  
  fbsql_set_transaction(resource link_identifier, int Locking, int Isolation); void -- Create a hard link  
  fbsql_start_db(string database_name [, resource link_identifier]); bool -- Create a hard link  
  fbsql_stop_db(string database_name [, resource link_identifier]); bool -- Create a hard link  
  fbsql_tablename(resource result, int i); string
  fbsql_username(resource link_identifier [, string username]); string -- Create a hard link  
  fbsql_warnings([bool OnOff]); bool -- Enable or disable FrontBase warnings  
  fdf_add_template(int fdfdoc, int newpage, string filename, string template, int rename); bool -- Rename a file  
  fdf_close(int fdf_document); bool -- Closes the FDF document  
  fdf_create(); int -- Creates a new FDF document  
  fdf_get_file(int fdf_document); string -- Gets the value of /F key  
  fdf_get_status(int fdf_document); string -- Gets the value of /Status key  
  fdf_get_value(int fdf_document, string fieldname); string -- Gets the value of a field as string  
  fdf_next_field_name(int fdf_document [, string fieldname]); string -- Gets the name of the next field name or the first field name  
  fdf_open(string filename); int -- Read entire file into an array  
  fdf_save(string filename); int -- Read entire file into an array  
  fdf_set_ap(int fdf_document, string field_name, int face, string filename, int page_number); bool -- Read entire file into an array  
  fdf_set_encoding(int fdf_document, string encoding); bool -- Sets FDF encoding (either "Shift-JIS" or "Unicode")  
  fdf_set_file(int fdf_document, string filename); bool -- Read entire file into an array  
  fdf_set_flags(int fdf_document, string fieldname, int whichFlags, int newFlags); bool -- Sets flags for a field in the FDF document  
  fdf_set_javascript_action(int fdf_document, string fieldname, int trigger, string script); bool -- Sets the javascript action for a field  
  fdf_set_opt(int fdf_document, string fieldname, int element, string str1, string str2); bool -- Sets a value in the opt array for a field  
  fdf_set_status(int fdf_document, string status); bool -- Give information about a file  
  fdf_set_submit_form_action(int fdf_document, string fieldname, int trigger, string script, int flags); bool -- Sets the submit form action for a field  
  fdf_set_value(int fdf_document, string fieldname, string value, int isName); bool -- Sets the value of a field  
  filepro_fieldcount(); int -- Read entire file into an array  
  filepro_fieldname(int field_number); string -- Read entire file into an array  
  filepro_fieldtype(int field_number); string -- Read entire file into an array  
  filepro_fieldwidth(int field_number); int -- Read entire file into an array  
  filepro_retrieve(int row_number, int field_number); string -- Read entire file into an array  
  filepro_rowcount(); int -- Read entire file into an array  
  filepro(string directory); bool -- Read entire file into an array  
  basename(string path [, string suffix]); string -- Returns the filename component of the path  
  chgrp(string filename, mixed group); int -- Change file group  
  chmod(string filename, int mode); int -- Change file mode  
  chown(string filename, mixed user); int -- Read entire file into an array  
  clearstatcache(); void -- Clear file stat cache  
  copy(string source, string dest); int -- Copy a file  
  delete(string file); void -- Read entire file into an array  
  dirname(string path); string -- Returns the directory name component of the path  
  disk_free_space(string directory); float -- Get free disk space for filesystem that path is on  
  disk_total_space(string directory); float -- Get total disk space for filesystem that path is on  
  diskfreespace(string directory); float -- Directory class with properties, handle and class and methods read, rewind and close  
  fclose(int fp); bool -- Close an open file pointer  
  feof(int fp); int -- Test for end-of-file on a file pointer  
  fflush(int fp); int -- Flushes output  
  fgetc(int fp); string -- Get a character from file pointer  
  fgetcsv(int fp, int length [, string delimiter [, string enclosure]]); array -- Get line from file pointer and parse for CSV fields  
  fgets(int fp [, int length]); string -- Get a line from file pointer  
  fgetss(int fp, int length [, string allowable_tags]); string -- Get a line from file pointer and strip HTML tags  
  file_exists(string filename); bool -- Returns true if filename exists  
  file_get_contents(string filename [, int use_include_path]); string -- Read the entire file into a string  
  file(string filename [, int use_include_path]); array -- Read entire file into an array  
  fileatime(string filename); int -- Get last access time of file  
  filectime(string filename); int -- Get inode modification time of file  
  filegroup(string filename); int -- Get file group  
  fileinode(string filename); int -- Get file inode  
  filemtime(string filename); int -- Get last modification time of file  
  fileowner(string filename); int -- Get file owner  
  fileperms(string filename); int -- Get file permissions  
  filesize(string filename); int -- Get file size  
  filetype(string filename); string -- Get file type  
  flock(int fp, int operation [, int &wouldblock]); bool -- Portable file locking  
  fnmatch(string pattern, string string [, int flags]); array -- Match filename against pattern  
  fopen(string filename, string mode [, int use_include_path [, resource zcontext]]); int -- Open a file or a URL and return a file pointer  
  fpassthru(int fp); int -- Output all remaining data from a file pointer  
  fputs(int fp, string str [, int length]); int
  fread(int fp, int length); string -- Binary-safe file read  
  fscanf(int handle, string format [, string var1]); mixed -- Implements a mostly ANSI compatible fscanf()  
  fseek(int fp, int offset [, int whence]); int -- Seek on a file pointer  
  fstat(int fp); array -- Stat() on a filehandle  
  ftell(int fp); int -- Get file pointer's read/write position  
  ftruncate(int fp, int size); int -- Truncate file to 'size' length  
  fwrite(int fp, string string [, int length]); int -- Binary-safe file write  
  glob(string pattern [, int flags]); array -- Find pathnames matching a pattern  
  is_dir(string filename); bool -- Returns true if file is directory  
  is_executable(string filename); bool -- Returns true if file is executable  
  is_file(string filename); bool -- Returns true if file is a regular file  
  is_link(string filename); bool -- Returns true if file is symbolic link  
  is_readable(string filename); bool -- Returns true if file can be read  
  is_uploaded_file(string filename); bool -- Read entire file into an array  
  is_writable(string filename); bool -- Returns true if file can be written  
  is_writeable(string filename); bool -- Read entire file into an array  
  link(string target, string link); int -- Create a hard link  
  linkinfo(string path); int -- Returns the st_dev field of the UNIX C stat structure describing the link  
  lstat(string filename); array -- Give information about a file or symbolic link  
  mkdir(string pathname, int mode); int -- Create a directory  
  move_uploaded_file(string filename, string destination); bool -- Read entire file into an array  
  parse_ini_file(string filename [, bool process_sections]); array -- Read entire file into an array  
  pathinfo(string path); array -- Returns information about a certain string  
  pclose(int fp); int -- Close a file pointer opened by popen()  
  popen(string command, string mode); int -- Execute a command and open either a read or a write pipe to it  
  readfile(string filename [, int use_include_path]); int -- Output a file or a URL  
  readlink(string path); string -- Return the target of a symbolic link  
  realpath(string path); string -- Return the resolved path  
  rename(string oldname, string newname); bool -- Rename a file  
  rewind(int fp); int -- Rewind the position of a file pointer  
  rmdir(string dirname); bool -- Returns the directory name component of the path  
  stat(string filename); array -- Give information about a file  
  file_get_meta_data(resource stream); array -- Read entire file into an array  
  stream_register_wrapper(string protocol, string classname); boolean -- Registers a custom URL protocol handler class  
  stream_set_blocking(resource stream, int mode); bool -- Set blocking/non-blocking mode on a socket or stream  
  stream_set_timeout(resource stream, int seconds, int microseconds); bool -- Set timeout on stream read to seconds      microseonds  
  stream_set_write_buffer(resource stream, int buffer); int -- Set file write buffer  
  symlink(string target, string link); int -- Create a symbolic link  
  tempnam(string dir, string prefix); string -- Create a unique filename in a directory  
  tmpfile(); int -- Create a temporary file that will be deleted automatically after use  
  touch(string filename [, int time [, int atime]]); int -- Set modification time of file  
  umask(int mask); int -- Return or change the umask  
  unlink(string filename); int -- Delete a file  
  fribidi_log2vis(string str, string direction, int charset); string -- Directory class with properties, handle and class and methods read, rewind and close  
  ftp_async_continue(resource ftp_stream); bool
  ftp_async_fget(resource ftp_stream, resource fp, string remote_file, int mode [, int resumepos]); bool
  ftp_async_fput(resource ftp_stream, string remote_file, resource fp, int mode [, int startpos]); bool
  ftp_async_get(resource ftp_stream, string local_file, string remote_file, int mode [, int resumepos]); bool
  ftp_async_put(resource ftp_stream, string remote_file, string local_file, int mode [, int startpos]); bool
  ftp_cdup(resource ftp_stream); bool -- Changes to the parent directory  
  ftp_chdir(resource ftp_stream, string directory); bool -- Directory class with properties, handle and class and methods read, rewind and close  
  ftp_close(resource ftp_stream); void -- Closes the FTP stream  
  ftp_connect(string host [, int port [, int timeout]]); resource -- Return current UNIX timestamp  
  ftp_delete(resource ftp_stream, string path); bool -- Deletes a file  
  ftp_exec(resource ftp_stream, string command); bool -- Requests execution of a program on the FTP server  
  ftp_fget(resource ftp_stream, resource fp, string remote_file, int mode [, int resumepos]); bool -- Retrieves a file from the FTP server and writes it to an open file  
  ftp_fput(resource ftp_stream, string remote_file, resource fp, int mode [, int startpos]); bool -- Stores a file from an open file to the FTP server  
  ftp_get_option(resource ftp_stream, int option); mixed -- Gets an FTP option  
  ftp_get(resource ftp_stream, string local_file, string remote_file, int mode [, int resumepos]); bool -- Retrieves a file from the FTP server and writes it to a local file  
  ftp_login(resource ftp_stream, string username, string password); bool -- Logs into the FTP server  
  ftp_mdtm(resource ftp_stream, string remote_file); int -- Returns the last modification time of the file, or -1 on error  
  ftp_mkdir(resource ftp_stream, string directory); string -- Directory class with properties, handle and class and methods read, rewind and close  
  ftp_nlist(resource ftp_stream, string directory); array -- Directory class with properties, handle and class and methods read, rewind and close  
  ftp_pasv(resource ftp_stream, bool pasv); bool -- Turns passive mode on or off  
  ftp_put(resource ftp_stream, string remote_file, string local_file, int mode [, int startpos]); bool -- Stores a file on the FTP server  
  ftp_pwd(resource ftp_stream); string -- Returns the present working directory  
  ftp_quit(resource ftp_stream); void
  ftp_rawlist(resource ftp_stream, string directory); array -- Directory class with properties, handle and class and methods read, rewind and close  
  ftp_rename(resource ftp_stream, string from, string to); bool -- Renames the given file to a new path  
  ftp_rmdir(resource ftp_stream, string directory); bool -- Directory class with properties, handle and class and methods read, rewind and close  
  ftp_set_option(resource ftp_stream, int option, mixed value); bool -- Sets an FTP option  
  ftp_site(resource ftp_stream, string cmd); bool -- Sends a SITE command to the server  
  ftp_size(resource ftp_stream, string remote_file); int -- Returns the size of the file, or -1 on error  
  ftp_systype(resource ftp_stream); string -- Returns the system type identifier  
  call_user_func_array(string function_name [, array paramarr]); mixed -- Call a user function which is the first parameter with the arguments contained in array  
  call_user_func(string function_name [, mixed parameter [, mixed ...]]); mixed -- Call a user function which is the first parameter  
  create_function(string args, string code); string -- Creates an anonymous function, and returns its name (funny, eh?)  
  func_get_arg(int arg_num); mixed -- Get the $arg_num'th argument that was passed to the function  
  func_get_args(); array -- Get an array of the arguments that were passed to the function  
  func_num_args(); int -- Get the number of arguments that were passed to the function  
  function_exists(string function_name); bool -- Checks if the function exists  
  get_defined_functions(); array -- Returns an array of all defined functions  
  register_shutdown_function(string func); int -- Register a user-level function to be called on request termination  
  register_tick_function(string func [, mixed arg]); void -- Registers a tick callback function  
  unregister_tick_function(string func [, mixed arg]); void -- Unregisters a tick callback function  
  bind_textdomain_codeset(string domain, string codeset); string
  bindtextdomain(string domain, string directory); string -- Directory class with properties, handle and class and methods read, rewind and close  
  dcgettext(string domain, string message, int category); string -- Return the translation of msgid for domain_name and category, or msgid unaltered if a translation does not exist  
  dcngettext(string domain, string msgid1, string msgid2, int n, int category); string
  dgettext(string domain, string message); string -- Return the translation of msgid for domain_name, or msgid unaltered if a translation does not exist  
  dngettext(string domain, string msgid1, string msgid2, int n); string
  gettext(string message); string -- Return the translation of msgid for the current domain, or msgid unaltered if a translation does not exist  
  ngettext(string msgid1, string msgid2, int n); string -- Plural version of gettext()  
  textdomain(string text_domain); string -- Set the textdomain to "domain". Returns the current domain  
  gmp_abs(resource a); resource -- Calculates absolute value  
  gmp_add(resource a, resource b); resource -- Add a and b  
  gmp_and(resource a, resource b); resource -- Calculates logical AND of a and b  
  gmp_clrbit(resource &a, int index); resource -- Clears bit in a  
  gmp_cmp(resource a, resource b); int -- Compares two numbers  
  gmp_com(resource a); resource -- Calculates one's complement of a  
  gmp_div_q(resource a, resource b [, int round]); resource -- Returns the number rounded to specified precision  
  gmp_div_qr(resource n, resource d [, int round]); array -- Returns the number rounded to specified precision  
  gmp_div_r(resource n, resource d [, int round]); resource -- Returns the number rounded to specified precision  
  gmp_div(resource a, resource b); resource
  gmp_divexact(resource n, resource d); resource -- Divide a by b using exact division algorithm  
  gmp_fact(int a); resource -- Calculates factorial function  
  gmp_gcd(resource a, resource b); resource -- Computes greatest common denominator (gcd) of a and b  
  gmp_gcdext(resource a, resource b); array -- Computes G, S, and T, such that AS      BT = G = `gcd' (A, B)  
  gmp_hamdist(resource a, resource b); int -- Calculates hamming distance between a and b  
  gmp_init(mixed number); resource -- Initializes GMP number  
  gmp_intval(resource gmpnumber); int -- Gets signed long value of GMP number  
  gmp_invert(resource a, resource b); resource -- Computes the inverse of a modulo b  
  gmp_jacobi(resource a, resource p); int -- Computes Jacobi symbol  
  gmp_legendre(resource a, resource p); int -- Computes Legendre symbol  
  gmp_mod(resource n, resource d); resource -- Computes a modulo b  
  gmp_mul(resource a, resource b); resource -- Multiply a and b  
  gmp_neg(resource a); resource -- Negates a number  
  gmp_or(resource a, resource b); resource -- Calculates logical OR of a and b  
  gmp_perfect_square(resource a); bool -- Checks if a is an exact square  
  gmp_popcount(resource a); int -- Calculates the population count of a  
  gmp_pow(resource base, int exp); resource -- Returns e raised to the power of the number  
  gmp_powm(resource base, resource exp, resource mod); resource -- Returns e raised to the power of the number  
  gmp_prob_prime(resource a [, int reps]); int -- Checks if a is "probably prime"  
  gmp_random(int limiter); resource -- Gets random number  
  gmp_scan0(resource a, int start); int -- Finds first zero bit  
  gmp_scan1(resource a, int start); int -- Finds first non-zero bit  
  gmp_setbit(resource &a, int index [, bool set_clear]); resource -- Sets or clear bit in a  
  gmp_sign(resource a); int -- Gets the sign of the number  
  gmp_sqrt(resource a); resource -- Takes integer part of square root of a  
  gmp_sqrtrm(resource a); array -- Takes integer part of square root of a  
  gmp_strval(resource gmpnumber [, int base]); string -- Gets string representation of GMP number   
  gmp_sub(resource a, resource b); resource -- Subtract b from a  
  gmp_xor(resource a, resource b); resource -- Calculates logical exclusive OR of a and b  
  header(string string [, bool replace [, int http_reponse_code]]); int -- Sends a raw HTTP header  
  headers_sent(string &file [, int &line]); bool -- Returns true if headers have already been sent, false otherwise  
  setcookie(string name [, string value [, int expire [, string path [, string domain [, int secure]]]]]); boolean -- Returns e raised to the power of the number  
  hw_array2objrec(array object_array); strin -- Returns object record of object array  
  hw_changeobject(int link, int objid, array attributes); void -- Create a hard link  
  hw_children(int connection, int objectID); array -- Returns array of children object ids  
  hw_childrenobj(int connection, int objectID); array -- Returns array of children object records  
  hw_close(int connection); int -- Close connection to Hyperwave server  
  hw_connect(string host, int port, string username, string password); int -- Connect to the Hyperwave server  
  hw_connection_info(int link); void -- Create a hard link  
  hw_cp(int connection, array object_id_array, int destination id); int -- Copies object  
  hw_deleteobject(int connection, int object_to_delete); int -- Deletes object  
  hw_docbyanchor(int connection, int anchorID); int -- Returns objid of document belonging to anchorid  
  hw_docbyanchorobj(int connection, int anchorID); string -- Returns object record of document belonging to anchorid  
  hw_document_attributes(int hw_document); string -- Returns object record of document  
  hw_document_bodytag(int hw_document); string -- Return bodytag prefixed by prefix  
  hw_document_content(int hw_document); string -- Returns content of document  
  hw_document_setcontent(int hw_document, string content); string -- Sets/replaces content of document  
  hw_document_size(int hw_document); int -- Returns size of document  
  hw_dummy(int link, int id, int msgid); string -- Create a hard link  
  hw_edittext(int connection, int hw_document); int -- Modifies text document  
  hw_error(int connection); int -- Returns last error number  
  hw_errormsg(int connection); string -- Returns last error message  
  hw_free_document(int hw_document); int -- Frees memory of document  
  hw_getanchors(int connection, int objectID); array -- Return all anchors of object  
  hw_getanchorsobj(int connection, int objectID); array -- Return all object records of anchors of object  
  hw_getandlock(int connection, int objectID); string -- Returns object record and locks object  
  hw_getchildcoll(int connection, int objectID); array -- Returns array of child collection object ids  
  hw_getchildcollobj(int connection, int objectID); array -- Returns array of child collection object records  
  hw_getchilddoccoll(int connection, int objectID); array -- Returns all children ids which are documents  
  hw_getchilddoccollobj(int connection, int objectID); array -- Returns all children object records which are documents  
  hw_getobject(int connection, [int|array] objectID, string query); array -- Returns object record   
  hw_getobjectbyquery(int connection, string query, int max_hits); array -- Return the highest value in an array or a series of arguments  
  hw_getobjectbyquerycoll(int connection, int objectID, string query, int max_hits); array -- Return the highest value in an array or a series of arguments  
  hw_getobjectbyquerycollobj(int connection, int objectID, string query, int max_hits); array -- Return the highest value in an array or a series of arguments  
  hw_getobjectbyqueryobj(int connection, string query, int max_hits); array -- Return the highest value in an array or a series of arguments  
  hw_getparents(int connection, int objectID); array -- Returns array of parent object ids  
  hw_getparentsobj(int connection, int objectID); array -- Returns array of parent object records  
  hw_getrellink(int link, int rootid, int sourceid, int destid); string -- Create a hard link  
  hw_getremote(int connection, int objectID); int -- Returns the content of a remote document  
  hw_getremotechildren(int connection, string object record); int -- Returns the remote document or an array of object records  
  hw_getsrcbydestobj(int connection, int objectID); array -- Returns object id of source docuent by destination anchor  
  hw_gettext(int connection, int objectID [, mixed rootID/prefix]); int -- Returns text document. Links are relative to rootid if given  
  hw_getusername(int connection); string -- Returns the current user name  
  hw_identify(string username, string password); int -- Identifies at Hyperwave server  
  hw_incollections(int connection, array object_id_array, array collection_id_array, int return_collections); array -- Returns object ids which are in collections  
  hw_info(int connection); string -- Outputs info string  
  hw_inscoll(int connection, int objectID, array object_array); int -- Inserts collection  
  hw_insdoc(int connection, int parentID, string object_record, string text); int -- Inserts document  
  hw_insertanchors(int hwdoc, array anchorecs, array dest [, array urlprefixes]); string -- Inserts only anchors into text  
  hw_insertdocument(int connection, int parent_id, int hw_document); int -- Insert new document  
  hw_insertobject(int connection, string object rec, string parameter); int -- Inserts an object  
  hw_mapid(int connection, int server id, int object id); int -- Returns virtual object id of document on remote Hyperwave server  
  hw_modifyobject(int connection, int object_to_change, array remove, array add, int mode); int -- Modifies attributes of an object  
  hw_mv(int connection, array object id array, int source id, int destination id); int -- Moves object  
  hw_new_document(string object_record, string document_data, int document_size); int -- Create a new document  
  hw_objrec2array(string object_record [, array format]); array -- Returns object array of object record  
  hw_output_document(int hw_document); int -- Prints document  
  hw_pconnect(string host, int port, string username, string password); int -- Connect to the Hyperwave server persistent  
  hw_pipedocument(int connection, int objectID); int -- Returns document  
  hw_root(); int -- Returns object id of root collection  
  hw_setlinkroot(int link, int rootid); void -- Create a hard link  
  hw_stat(int link); string -- Create a hard link  
  hw_unlock(int connection, int objectID); int -- Unlocks object  
  hw_who(int connection); int -- Returns names and info of users loged in  
  key(void); string -- Return the key of the element currently pointed to by the internal array pointer  
  langdepvalue(string language); string
  value(void); string
  values(void); array
  attribute([string name [, string value]]); object
  checkin(array parameter); object
  checkout(array parameter); object
  children(array parameter); array
  mimetype(void); string
  read(string buffer, integer len); string
  content(array parameter); object
  copy(array parameter); object -- Copy a file  
  dbstat(array parameter); object
  dcstat(array parameter); object
  dstanchors(array parameter); object
  dstofsrcanchors(array parameter); object
  count(void); int -- Count the number of elements in a variable (usually an array)  
  reason(void); object
  find(array parameter); array
  ftstat(array parameter); object
  hwapi_hgcsp(string hostname [, int port]); object
  hwstat(array parameter); object
  identify(array parameter); object
  info(array parameter); object
  insert(array parameter); object
  insertanchor(array parameter); object
  insertcollection(array parameter); object
  insertdocument(array parameter); object
  link(array parameter); object -- Create a hard link  
  lock(array parameter); object
  move(array parameter); object
  content(string content, string mimetype); string
  assign(array parameter); object
  attreditable(array parameter); bool
  count(array parameter); int -- Count the number of elements in a variable (usually an array)  
  insert(object attribute); bool
  hw_api_object(array parameter); object
  remove(string name); bool
  title(array parameter); string
  value(string name); string
  object(array parameter); object, class hw_api
  objectbyanchor(array parameter); object
  parents(array parameter); array
  description(void); string
  type(void); object
  remove(array parameter); object
  replace(array parameter); object
  setcommitedversion(array parameter); object
  srcanchors(array parameter); object
  srcsofdst(array parameter); object
  unlock(array parameter); object
  user(array parameter); object
  userlist(array parameter); object
  ibase_blob_add(int blob_id, string data); int -- Add data into created blob  
  ibase_blob_cancel(int blob_id); int -- Cancel creating blob  
  ibase_blob_close(int blob_id); int -- Close blob  
  ibase_blob_create([int link_identifier]); int -- Create a hard link  
  ibase_blob_echo(string blob_id_str); int -- Output blob contents to browser  
  ibase_blob_get(int blob_id, int len); string -- Get len bytes data from open blob  
  ibase_blob_import([int link_identifier, int file_id]); string -- Create a hard link  
  ibase_blob_info(string blob_id_str); object -- Return blob length and other useful info  
  ibase_blob_open(string blob_id); int -- Open blob for retriving data parts  
  ibase_close([int connection_id]); int -- Close an InterBase connection  
  ibase_commit([int link_identifier, int trans_number]); int -- Create a hard link  
  ibase_connect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]]); int -- Open a connection to an InterBase database  
  ibase_errmsg(); string -- Return error message  
  ibase_execute(int query [, int bind_args]); int -- Execute a previously prepared query  
  ibase_fetch_object(int result_id); object -- Fetch a object from the results of a query  
  ibase_fetch_row(int result_identifier); array -- Fetch a row  from the results of a query  
  ibase_field_info(int result, int field number); array -- Get information about a field  
  ibase_free_query(int query); int -- Free memory used by a query  
  ibase_free_result(int result_identifier); int -- Free the memory used by a result  
  ibase_num_fields(int result_id); int -- Get the number of fields in result  
  ibase_pconnect(string database [, string username [, string password [, string charset [, int buffers [, int dialect [, string role]]]]]]); int -- Open a persistent connection to an InterBase database  
  ibase_prepare([int link_identifier, string query]); int -- Create a hard link  
  ibase_query([int link_identifier, string query [, int bind_args]]); int -- Create a hard link  
  ibase_rollback([int link_identifier, int trans_number]); int -- Create a hard link  
  ibase_timefmt(string format [, int columntype]); int -- Sets the format of timestamp, date and time columns returned from queries  
  ibase_trans([int trans_args [, int link_identifier]]); int -- Create a hard link  
  icap_close(int icap_stream [, int flags]); int
  icap_create_calendar(int stream_id, string calendar); string
  icap_delete_calendar(int stream_id, string calendar); string
  icap_delete_event(int stream_id, int uid); string
  icap_fetch_event(int stream_id, int event_id [, int options]); int
  icap_list_alarms(int stream_id, array date, array time); int -- Return current UNIX timestamp  
  icap_list_events(int stream_id, int begin_date [, int end_date]); array -- Advances array argument's internal pointer to the last element and return it  
  icap_open(string calendar, string username, string password, string options); stream
  icap_rename_calendar(int stream_id, string old_name, string new_name); string
  icap_reopen(int stream_id, string calendar [, int options]); int
  icap_snooze(int stream_id, int uid); string
  icap_store_event(int stream_id, object event); string
  iconv_get_encoding([string type]); array -- Get internal encoding and output encoding for ob_iconv_handler()  
  iconv_set_encoding(string type, string charset); bool -- Sets internal encoding and output encoding for ob_iconv_handler()  
  iconv(string in_charset, string out_charset, string str); string -- Returns str converted to the out_charset character set  
  ob_iconv_handler(string contents, int status); array -- Give information about a file  
  ifx_affected_rows(int result_id); int -- Returns the number of rows affected by query identified by resultid  
  ifx_blobinfile_mode(int mode); void -- Sets the default blob-mode for all select-queries   
  ifx_byteasvarchar(int mode); void -- Sets the default byte-mode for all select-queries   
  ifx_close([int link_identifier]); int -- Create a hard link  
  ifx_connect([string database [, string userid [, string password]]]); int -- Connects to database using userid/password, returns connection id  
  ifx_copy_blob(int bid); int -- Duplicates the given blob-object  
  ifx_create_blob(int type, int mode, string param); int -- Creates a blob-object  
  ifx_create_char(string param); int -- Creates a char-object  
  ifx_do(int result_id); int -- Executes a previously prepared query or opens a cursor for it  
  ifx_error(); string -- Returns the Informix error codes (SQLSTATE & SQLCODE)  
  ifx_errormsg([int errorcode]); string -- Returns the Informix errormessage associated with   
  ifx_fetch_row(int result_id [, mixed position]); array -- Fetches the next row or <position> row if using a scroll cursor  
  ifx_fieldproperties(int result_id); array -- Returns an associative for query <resultid> array with fieldnames as key  
  ifx_fieldtypes(int result_id); array -- Returns an associative array with fieldnames as key for query <resultid>  
  ifx_free_blob(int bid); int -- Deletes the blob-object  
  ifx_free_char(int bid); int -- Deletes the char-object  
  ifx_free_result(int result_id); int -- Releases resources for query associated with resultid  
  ifx_get_blob(int bid); int -- Returns the content of the blob-object  
  ifx_get_char(int bid); int -- Returns the content of the char-object  
  ifx_getsqlca(int result_id); array -- Returns the sqlerrd[] fields of the sqlca struct for query resultid  
  ifx_htmltbl_result(int result_id [, string html_table_options]); int -- Formats all rows of the resultid query into a html table  
  ifx_nullformat(int mode); void -- Sets the default return value of a NULL-value on a fetch-row   
  ifx_num_fields(int result_id); int -- Returns the number of columns in query resultid  
  ifx_num_rows(int result_id); int -- Returns the number of rows already fetched for query identified by resultid  
  ifx_pconnect([string database [, string userid [, string password]]]); int -- Connects to database using userid/password, returns connection id  
  ifx_prepare(string query, int conn_id [, int cursor_def, mixed blobidarray]); int -- Prepare a query on a given connection  
  ifx_query(string query, int link_identifier [, int cursor_type [, mixed blobidarray]]); int -- Create a hard link  
  ifx_textasvarchar(int mode); void -- Sets the default text-mode for all select-queries  
  ifx_update_blob(int bid, string content) -- Updates the content of the blob-object  
  ifx_update_char(int bid, string content); int -- Updates the content of the char-object  
  ifxus_close_slob(int bid); int -- Deletes the slob-object  
  ifxus_create_slob(int mode); int -- Creates a slob-object and opens it  
  ifxus_free_slob(int bid); int -- Deletes the slob-object  
  ifxus_open_slob(long bid, int mode); int -- Opens an slob-object  
  ifxus_read_slob(long bid, long nbytes); int -- Reads nbytes of the slob-object  
  ifxus_seek_slob(long bid, int mode, long offset); int -- Sets the current file or seek position of an open slob-object  
  ifxus_tell_slob(long bid); int -- Returns the current file or seek position of an open slob-object  
  ifxus_write_slob(long bid, string content); int -- Writes a string into the slob-object  
  iis_add_server(string path, string comment, string server_ip, int port, string host_name, int rights, int start_server); int
  iis_get_dir_security(int server_instance, string virtual_path); int -- Perform an apache sub-request  
  iis_get_script_map(int server_instance, string virtual_path, string script_extension); int -- Perform an apache sub-request  
  iis_get_server_by_comment(string comment); int
  iis_get_server_by_path(string path); int
  iis_get_server_rights(int server_instance, string virtual_path); int -- Perform an apache sub-request  
  iis_get_service_state(string service_id); int
  iis_remove_server(int server_instance); int
  iis_set_app_settings(int server_instance, string virtual_path, string application_scope); int -- Perform an apache sub-request  
  iis_set_dir_security(int server_instance, string virtual_path, int directory_flags); int -- Perform an apache sub-request  
  iis_set_script_map(int server_instance, string virtual_path, string script_extension, string engine_path, int allow_scripting); int -- Perform an apache sub-request  
  iis_set_server_rights(int server_instance, string virtual_path, int directory_flags); int -- Perform an apache sub-request  
  iis_start_server(int server_instance); int
  iis_start_service(string service_id); int
  iis_stop_server(int server_instance); int
  iis_stop_service(string service_id); int
  exif_imagetype(string filename); int|false -- Read entire file into an array  
  exif_read_data(string filename [, string sections [, bool arrays [, bool thumbnail]]]); array -- Read entire file into an array  
  exif_thumbnail(string filename [, int &width [, int &height [, int &imagetype]]]); string -- Read entire file into an array  
  getimagesize(string filename [, array imageinfo]); array -- Get the size of an image as 4-element array  
  image2wbmp(resource image [, string filename [, int threshold]]); int -- Read entire file into an array  
  imagealphablending(resource image, bool blendmode); int -- Turn alpha blending mode on or off for the given image  
  imagearc(resource image, int cx, int cy, int w, int h, int s, int e, int col); int -- Draw a partial ellipse  
  imagechar(resource image, int font, int x, int y, string c, int col); int -- Draw a character  
  imagecharup(resource image, int font, int x, int y, string c, int col); int -- Draw a character rotated 90 degrees counter-clockwise  
  imagecolorallocate(resource image, int red, int green, int blue); int -- Allocate a color for an image  
  imagecolorat(resource image, int x, int y); int -- Get the index of the color of a pixel  
  imagecolorclosest(resource image, int red, int green, int blue); int -- Get the index of the closest color to the specified color  
  imagecolorclosestalpha(resource image, int red, int green, int blue, int alpha); int -- Find the closest matching colour with alpha transparency  
  imagecolorclosesthwb(resource image, int red, int green, int blue); int -- Get the index of the color which has the hue, white and blackness nearest to the given color  
  imagecolordeallocate(resource image, int color); int -- De-allocate a color for an image  
  imagecolorexact(resource image, int red, int green, int blue); int -- Get the index of the specified color  
  imagecolorexactalpha(resource image, int red, int green, int blue, int alpha); int -- Find exact match for colour with transparency  
  imagecolorresolve(resource image, int red, int green, int blue); int -- Get the index of the specified color or its closest possible alternative  
  imagecolorresolvealpha(resource image, int red, int green, int blue, int alpha); int -- Resolve/Allocate a colour with an alpha level.  Works for true colour and palette based images  
  imagecolorset(resource image, int index, int red, int green, int blue); bool -- Set the color for the specified palette index  
  imagecolorsforindex(resource image, int index); array -- Get the colors for an index  
  imagecolorstotal(resource image); int -- Find out the number of colors in an image's palette  
  imagecolortransparent(resource image [, int color]); int -- Define a color as transparent  
  imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h); int -- Copy part of an image  
  imagecopymerge(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct); int -- Merge one part of an image with another  
  imagecopymergegray(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct); int -- Merge one part of an image with another  
  imagecopyresampled(resource dst_im, resource src_im, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH); int -- Copy and resize part of an image using resampling to help ensure clarity  
  imagecopyresized(resource dst_im, resource src_im, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH); int -- Copy and resize part of an image  
  imagecreate(int x_size, int y_size); resource -- Create a new image  
  imagecreatefromgd(string filename); resource -- Read entire file into an array  
  imagecreatefromgd2(string filename); resource -- Read entire file into an array  
  imagecreatefromgd2part(string filename, int srcX, int srcY, int width, int height); resource -- Read entire file into an array  
  imagecreatefromgif(string filename); resource -- Read entire file into an array  
  imagecreatefromjpeg(string filename); resource -- Read entire file into an array  
  imagecreatefrompng(string filename); resource -- Read entire file into an array  
  imagecreatefromstring(string image); resource -- Create a new image from the image stream in the string  
  imagecreatefromwbmp(string filename); resource -- Read entire file into an array  
  imagecreatefromxbm(string filename); resource -- Read entire file into an array  
  imagecreatefromxpm(string filename); resource -- Read entire file into an array  
  imagecreatetruecolor(int x_size, int y_size); resource -- Create a new true color image  
  imagedashedline(resource image, int x1, int y1, int x2, int y2, int col); int -- Draw a dashed line  
  imagedestroy(resource image); int -- Destroy an image  
  imageellipse(resource image, int cx, int cy, int w, int h, int col); int -- Draw an ellipse  
  imagefill(resource image, int x, int y, int col); int -- Flood fill  
  imagefilledarc(resource image, int cx, int cy, int w, int h, int s, int e, int col, int style); int -- Draw a filled partial ellipse  
  imagefilledellipse(resource image, int cx, int cy, int w, int h, int col); int -- Draw an ellipse  
  imagefilledpolygon(resource image, array points, int num_points, int col); int -- Draw a filled polygon  
  imagefilledrectangle(resource image, int x1, int y1, int x2, int y2, int col); int -- Draw a filled rectangle  
  imagefilltoborder(resource image, int x, int y, int border, int col); int -- Flood fill to specific color  
  imagefontheight(int font); int -- Get font height  
  imagefontwidth(int font); int -- Get font width  
  imageftbbox(int size, int angle, string font_file, string text [, array extrainfo]); array -- Give the bounding box of a text using fonts via freetype2  
  imagefttext(resource image, int size, int angle, int x, int y, int col, string font_file, string text [, array extrainfo]); array -- Write text to the image using fonts via freetype2  
  imagegammacorrect(resource image, float inputgamma, float outputgamma); int -- Apply a gamma correction to a GD image  
  imagegd(resource image [, string filename]); int -- Read entire file into an array  
  imagegd2(resource image [, string filename]); int -- Read entire file into an array  
  imagegif(resource image [, string filename]); int -- Read entire file into an array  
  imageinterlace(resource image [, int interlace]); int -- Enable or disable interlace  
  imagejpeg(resource image [, string filename [, int quality]]); int -- Read entire file into an array  
  imageline(resource image, int x1, int y1, int x2, int y2, int col); int -- Draw a line  
  imageloadfont(string file); int -- Read entire file into an array  
  imagepalettecopy(resource destination, resource source); int -- Copy the palette from the src image onto the dst image  
  imagepng(resource image [, string filename]); int -- Read entire file into an array  
  imagepolygon(resource image, array points, int num_points, int col); int -- Draw a polygon  
  imagepsbbox(string text, int font, int size [, int space [, int tightness [, float angle]]]); array -- Return the bounding box needed by a string if rasterized  
  imagepscopyfont(int fontindex); int -- Make a copy of a font for purposes like extending or reenconding  
  imagepsencodefont(int font_index, string encodingfile); int -- To change a fonts character encoding vector  
  imagepsextendfont(int font_index, float extend); bool -- Extend or or condense (if extend < 1) a font  
  imagepsfreefont(int fontindex); void -- Free memory used by a font  
  imagepsloadfont(string filename); int -- Read entire file into an array  
  imagepsslantfont(int font_index, float slant); bool -- Slant a font  
  imagepstext(resource image, string text, int font, int size, int foreground, int background, int x, int y [, int space [, int tightness [, float angle [, int antialias_steps]]]]); array -- Rasterize a string over an image  
  imagerectangle(resource image, int x1, int y1, int x2, int y2, int col); int -- Draw a rectangle  
  imagesetbrush(resource image, resource brush); int -- Set the brush image to $brush when filling $image with the "IMG_COLOR_BRUSHED" color  
  imagesetpixel(resource image, int x, int y, int col); int -- Set a single pixel  
  imagesetstyle(resource image, array style); int -- Set the line drawing styles for use with imageline and IMG_COLOR_STYLED.  
  imagesetthickness(resource image, int thickness); void -- Set line thickness for drawing lines, ellipses, rectangles, polygons etc.  
  imagesettile(resource image, resource tile); int -- Set the tile image to $tile when filling $image with the "IMG_COLOR_TILED" color  
  imagestring(resource image, int font, int x, int y, string s, int col); int -- Draw a string horizontally  
  imagestringup(resource image, int font, int x, int y, string s, int col); int -- Draw a string vertically - rotated 90 degrees counter-clockwise  
  imagesx(resource image); int -- Get image width  
  imagesy(resource image); int -- Get image height  
  imagetruecolortopalette(resource image, bool dither, int ncolors); void -- Convert a true colour image to a palette based image with a number of colours, optionally using dithering.  
  imagettfbbox(int size, int angle, string fontfile, string text); array -- Give the bounding box of a text using TrueType fonts  
  imagettftext(resource image, int size, int angle, int x, int y, int col, string fontfile, string text); array -- Write text to the image using a TrueType font  
  imagetypes(); int -- Return the types of images supported in a bitfield - 1=GIF, 2=JPEG, 4=PNG, 8=WBMP, 16=XPM  
  imagewbmp(resource image [, string filename [, int foreground]]); int -- Read entire file into an array  
  image_type_to_mime_type(int imagetype); string -- Get Mime-Type for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype  
  iptcembed(string iptcdata, string jpeg_file_name [, int spool]); array -- Embed binary IPTC data into a JPEG image.  
  iptcparse(string iptcblock); array -- Parse binary IPTC-data into associative array  
  jpeg2wbmp(string jpegname, string wbmpname, int d_height, int d_width, int threshold); int
  png2wbmp(string pngname, string wbmpname, int d_height, int d_width, int threshold); int
  exif_read_data(string filename, string sections, bool arrays, bool thumbnail); array -- Read entire file into an array  
  imap_8bit(string string); string -- Convert an 8-bit string to a quoted-printable string  
  imap_alerts(); array -- Returns an array of all IMAP alerts that have been generated since the last page load or since the last imap_alerts() call, whichever came last. The alert stack is cleared after imap_alerts() is called.  
  imap_append(int imap_stream, string mbox, string message [, string flags]); int -- Append a new message to a specified mailbox  
  imap_base64(string text); string -- Decode BASE64 encoded text  
  imap_binary(string string); string -- Convert an 8bit string to a base64 string  
  imap_body(int imap_stream, int msg_number [, int flags]); string -- Read the message body  
  imap_bodystruct(int stream_id, int msg_no, int section); object -- Read the structure of a specified body section of a specific message  
  imap_check(int imap_stream); object -- Get mailbox properties  
  imap_clearflag_full(int stream, string sequence, string flag, string options); string -- Clears flags on messages  
  imap_close(int imap_stream [, int flags]); int -- Close an IMAP stream  
  imap_createmailbox(int imap_stream, string mbox); int -- Create a new mailbox  
  imap_delete(int imap_stream, int msg_number [, int flags]); int -- Mark a message for deletion  
  imap_deletemailbox(int imap_stream, string mbox); int -- Delete a mailbox  
  imap_errors(); array -- Returns an array of all IMAP errors generated since the last page load, or since the last imap_errors() call, whichever came last. The error stack is cleared after imap_errors() is called.  
  imap_expunge(int imap_stream); int -- Permanently delete all messages marked for deletion  
  imap_fetch_overview(int imap_stream, string sequence [, int flags]); array -- Read an overview of the information in the headers of the given message sequence  
  imap_fetchbody(int imap_stream, int msg_number, string part_number [, flags flags]); string -- Get a specific body section  
  imap_fetchheader(int imap_stream, int msgno, int flags); string -- Get the full unfiltered header for a message  
  imap_fetchstructure(int imap_stream, int msg_number [, int flags]); object -- Read the full structure of a message  
  imap_get_quota(int imap_stream, string quota_root); array -- Returns the quota set to the mailbox account qroot  
  imap_get_quotaroot(int imap_stream, string quota_root); array -- Returns the quota set to the mailbox account mbox  
  imap_getmailboxes(int imap_stream, string ref, string pattern); array -- Reads the list of mailboxes and returns a full array of objects containing name, attributes, and delimiter  
  imap_getsubscribed(int imap_stream, string ref, string pattern); array -- Return a list of subscribed mailboxes, in the same format as imap_getmailboxes()  
  imap_header(int imap_stream, int msg_number [, int fromlength [, int subjectlength [, string defaulthost]]]); object
  imap_headerinfo(int imap_stream, int msg_number [, int fromlength [, int subjectlength [, string defaulthost]]]); object -- Read the headers of the message  
  imap_headers(int imap_stream); array -- Returns headers for all messages in a mailbox  
  imap_last_error(); string -- Returns the last error that was generated by an IMAP function. The error stack is NOT cleared after this call.  
  imap_listmailbox(int imap_stream, string ref, string pattern); array -- Read the list of mailboxes  
  imap_listsubscribed(int imap_stream, string ref, string pattern); array -- Read the list of mailboxes  
  imap_mail_compose(array envelope, array body); string -- Create a MIME message based on given envelope and body sections  
  imap_mail_copy(int imap_stream, string msglist, string mbox [, int flags]); int -- Copy specified message to a mailbox  
  imap_mail_move(int imap_stream, string msglist, string mbox [, int flags]); int -- Move specified message to a mailbox  
  imap_mail(string to, string subject, string message [, string additional_headers [, string cc [, string bcc [, string rpath]]]]); string -- Send an email message  
  imap_mailboxmsginfo(int imap_stream); object -- Returns info about the current mailbox  
  imap_mime_header_decode(string text); array -- Decode mime header element in accordance with RFC 2047 and return array of objects containing 'charset' encoding and decoded 'text'  
  imap_msgno(int imap_stream, int uid); int -- Get the sequence number associated with a UID  
  imap_num_msg(int imap_stream); int -- Gives the number of messages in the current mailbox  
  imap_num_recent(int imap_stream); int -- Gives the number of recent messages in current mailbox  
  imap_open(string mailbox, string username, string password [, int flags]); int -- Send an email message  
  imap_ping(int imap_stream); int -- Check if the IMAP stream is still active  
  imap_qprint(string string); string -- Convert a quoted-printable string to an 8-bit string  
  imap_renamemailbox(int imap_stream, string old_mbox, string new_mbox); int -- Rename a mailbox  
  imap_reopen(int imap_stream, string mailbox [, string flags]); int -- Send an email message  
  imap_rfc822_parse_adrlist(string address, string default_host); array -- Parses an address string  
  imap_rfc822_parse_headers(string headers [, string defaulthost]); object -- Sends a raw HTTP header  
  imap_rfc822_write_address(string mailbox, string host, string personal); string -- Send an email message  
  imap_scanmailbox(int imap_stream, string ref, string pattern, string content); array -- Read list of mailboxes containing a certain string  
  imap_search(int imap_stream, string criteria, int flags); array -- Return a list of messages matching the given criteria  
  imap_set_quota(int imap_stream, string quota_root, int quota_limit); int -- Will set the quota for qroot mailbox  
  imap_setacl(int stream_id, string mailbox, string id, string rights); int -- Send an email message  
  imap_setflag_full(int stream, string sequence, string flag, string options); string -- Sets flags on messages  
  imap_sort(int stream, int criteria, int reverse, int options); array -- Sort an array of message headers, optionally including only messages that meet specified criteria.  
  imap_status(int imap_stream, string mailbox, int options); object -- Send an email message  
  imap_subscribe(int imap_stream, string mbox); int -- Subscribe to a mailbox  
  imap_thread(int stream_id [, int flags]); int -- Return threaded by REFERENCES tree  
  imap_uid(int imap_stream, int msgno); int -- Get the unique message id associated with a standard sequential message number  
  imap_undelete(int imap_stream, int msg_number); int -- Remove the delete flag from a message  
  imap_unsubscribe(int imap_stream, string mbox); int -- Unsubscribe from a mailbox  
  imap_utf7_decode(string text); string -- Decode a modified UTF-7 string  
  imap_utf7_encode(string data); string -- Encode a string in modified UTF-7  
  imap_utf8(string text); string -- Convert a string to UTF-8  
  assert_options(int what [, mixed value]); mixed -- Set/get the various assert flags  
  assert(string|bool assertion); int -- Checks if assertion is false  
  dl(string library); bool -- Load a PHP extension at runtime  
  extension_loaded(string name); bool -- Returns true if the named extension is loaded  
  get_cfg_var(string varname); string -- Get the value of a PHP configuration option  
  get_current_user(); string -- Get the name of the owner of the current PHP script  
  get_defined_constants(); array -- Return an array containing the names and values of all defined constants  
  get_extension_funcs(string module_name); array -- Returns an array with the names of functions belonging to the named extension  
  get_included_files(); array -- Returns an array with the file names that were include_once()'d  
  get_loaded_extensions(); array -- Return an array containing names of loaded extensions  
  get_magic_quotes_gpc(); long -- Get the current active configuration setting of magic_quotes_gpc  
  get_magic_quotes_runtime(); long -- Get the current active configuration setting of magic_quotes_runtime  
  get_required_files(); array
  getenv(string varname); string -- Get the value of an environment variable  
  getlastmod(); int -- Get time of last page modification  
  getmygid(); int -- Get PHP script owner's GID  
  getmyinode(); int -- Get the inode of the current script being parsed  
  getmypid(); int -- Get current process ID  
  getmyuid(); int -- Get PHP script owner's UID  
  getopt(string options); string -- Get options from the command line argument list  
  getrusage([int who]); array -- Returns an array of usage statistics  
  ini_alter(string varname, string newvalue); string
  ini_get_all([string extension]); array -- Get all configuration options  
  ini_get(string varname); string -- Get a configuration option  
  ini_restore(string varname); string -- Restore the value of a configuration option specified by varname  
  ini_set(string varname, string newvalue); string -- Set a configuration option, returns false on error and the old value of the configuration option on success  
  php_logo_guid(); string -- Return the special ID used to request the PHP logo in phpinfo screens 
  php_sapi_name(); string -- Return the current SAPI module name  
  php_uname(); string -- Return information about the system PHP was built on  
  phpcredits([int flag]); void -- Prints the list of people who've contributed to the PHP project  
  phpinfo([int what]); int -- Output a page of useful information about PHP and the current request  
  phpversion(); string -- Return the current PHP version  
  putenv(string setting); void -- Set the value of an environment variable  
  set_magic_quotes_runtime(int new_setting); long -- Set the current active configuration setting of magic_quotes_runtime and return previous  
  set_time_limit(int seconds); void -- Sets the maximum time a script can run  
  version_compare(string version1, string version2 [, string operator]); int -- Compares two "PHP-standardized" version number strings  
  zend_logo_guid(); string -- Return the special ID used to request the Zend logo in phpinfo screens 
  zend_version(); string -- Get the version of the Zend Engine  
  ingres_autocommit([resource link]); bool -- Create a hard link  
  ingres_close([resource link]); bool -- Create a hard link  
  ingres_commit([resource link]); bool -- Create a hard link  
  ingres_connect([string database [, string username [, string password]]]); resource -- Open a connection to an Ingres II database the syntax of database is [node_id;;]dbname[/svr_class]  
  ingres_fetch_array([int result_type [, resource link]]); array -- Create a hard link  
  ingres_fetch_object([int result_type [, resource link]]); object -- Create a hard link  
  ingres_fetch_row([resource link]); array -- Create a hard link  
  ingres_field_length(int index [, resource link]); int -- Create a hard link  
  ingres_field_name(int index [, resource link]); string -- Create a hard link  
  ingres_field_nullable(int index [, resource link]); bool -- Create a hard link  
  ingres_field_precision(int index [, resource link]); int -- Create a hard link  
  ingres_field_scale(int index [, resource link]); int -- Create a hard link  
  ingres_field_type(int index [, resource link]); string -- Create a hard link  
  ingres_num_fields([resource link]); int -- Create a hard link  
  ingres_num_rows([resource link]); int -- Create a hard link  
  ingres_pconnect([string database [, string username [, string password]]]); resource -- Open a persistent connection to an Ingres II database the syntax of database is [node_id;;]dbname[/svr_class]  
  ingres_query(string query [, resource link]); bool -- Create a hard link  
  ingres_rollback([resource link]); bool -- Create a hard link  
  ircg_channel_mode(resource connection, string channel, string mode_spec, string nick); boolean -- Sets channel mode flags for user  
  ircg_disconnect(resource connection, string reason); boolean -- ???  
  ircg_fetch_error_msg(resource connection); array -- Returns the error from previous ircg operation  
  ircg_get_username(resource connection); string -- Gets username for connection  
  ircg_html_encode(string html_string); boolean -- Encodes HTML preserving output  
  ircg_ignore_add(resource connection, string nick); boolean -- Adds a user to your ignore list on a server  
  ircg_ignore_del(resource connection, string nick); boolean -- Removes a user from your ignore list  
  ircg_is_conn_alive(resource connection); boolean -- Checks connection status  
  ircg_join(resource connection, string channel); boolean -- Joins a channel on a connected server  
  ircg_kick(resource connection, string channel, string nick, string reason); boolean -- Kicks user from channel  
  ircg_lookup_format_messages(string name); boolean -- Selects a set of format strings for display of IRC messages  
  ircg_msg(resource connection, string recipient, string message [, boolean suppress]); boolean -- ???  
  ircg_nick(resource connection, string nick); boolean -- ???  
  ircg_nickname_escape(string nick); string -- Escapes special characters in nickname to be IRC-compliant  
  ircg_nickname_unescape(string nick); string -- Decodes encoded nickname  
  ircg_notice(resource connection, string, string message); boolean -- ???  
  ircg_part(resource connection, string channel); boolean -- Leaves a channel  
  ircg_pconnect(string username [, string server_ip [, int server_port [, string msg_format [, array ctcp_messages [, array user_settings]]]]]); resource -- ???  
  ircg_register_format_messages(string name, array messages); boolean -- Registers a set of format strings for display of IRC messages  
  ircg_set_current(resource connection); boolean -- Sets current connection for output  
  ircg_set_file(resource connection, string path); bool -- Sets logfile for connection  
  ircg_set_on_die(resource connection, string host, int port, string data); bool -- Sets hostaction to be executed when connection dies  
  ircg_topic(resource connection, string channel, string new_topic); boolean -- Sets topic for channel  
  ircg_whois(resource connection, string nick); boolean -- Queries user information for nick on server  
  java_last_exception_clear(); void -- Clear last java extension  
  java_last_exception_get(); exception -- Get last Java exception  
  ldap_8859_to_t61(string value); string -- Translate 8859 characters to t61 characters  
  ldap_add(resource link_identifier, string dn, array entry); bool -- Create a hard link  
  ldap_bind(resource link_identifier [, string bind_rdn [, string bind_password]]); bool -- Create a hard link  
  ldap_close(resource link_identifier); bool -- Create a hard link  
  ldap_compare(resource link_identifier, string dn, string attribute, string value); bool -- Create a hard link  
  ldap_connect([string hostname [, int port]]); resource -- Connect to an LDAP server  
  ldap_count_entries(resource link_identifier, resource result_identifier); int -- Create a hard link  
  ldap_delete(resource link_identifier, string dn); bool -- Create a hard link  
  ldap_dn2ufn(string dn); string -- Convert DN to User Friendly Naming format  
  ldap_err2str(int errno); string -- Convert error number to error string  
  ldap_errno(resource link_identifier); int -- Create a hard link  
  ldap_error(resource link_identifier); string -- Create a hard link  
  ldap_explode_dn(string dn, int with_attrib); array -- Splits DN into its component parts  
  ldap_first_attribute(resource link_identifier, resource result_entry_identifier, int ber_identifier); string -- Create a hard link  
  ldap_first_entry(resource link_identifier, resource result_identifier); resource -- Create a hard link  
  ldap_first_reference(resource link, resource result); resource -- Create a hard link  
  ldap_free_result(resource result_identifier); bool -- Free result memory  
  ldap_get_attributes(resource link_identifier, resource result_entry_identifier); array -- Create a hard link  
  ldap_get_dn(resource link_identifier, resource result_entry_identifier); string -- Create a hard link  
  ldap_get_entries(resource link_identifier, resource result_identifier); array -- Create a hard link  
  ldap_get_option(resource link_identifier, int option, mixed retval); bool -- Create a hard link  
  ldap_get_values_len(resource link_identifier, resource result_entry_identifier, string attribute); array -- Create a hard link  
  ldap_get_values(resource link_identifier, resource result_entry_identifier, string attribute); array -- Create a hard link  
  ldap_list(resource link_identifier, string base_dn, string filter [, array attributes [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]]); resource -- Create a hard link  
  ldap_mod_add(resource link_identifier, string dn, array entry); bool -- Create a hard link  
  ldap_mod_del(resource link_identifier, string dn, array entry); bool -- Create a hard link  
  ldap_mod_replace(resoure link_identifier, string dn, array entry); bool -- Create a hard link  
  ldap_modify(resource link_identifier, string dn, array entry); bool -- Create a hard link  
  ldap_next_attribute(resource link_identifier, resource result_entry_identifier, resource ber_identifier); string -- Create a hard link  
  ldap_next_entry(resource link_identifier, resource result_entry_identifier); resource -- Create a hard link  
  ldap_next_reference(resource link, resource entry); resource -- Create a hard link  
  ldap_parse_reference(resource link, resource entry, array referrals); bool -- Create a hard link  
  ldap_parse_result(resource link, resource result, int errcode, string matcheddn, string errmsg, array referrals); bool -- Create a hard link  
  ldap_read(resource link_identifier, string base_dn, string filter [, array attributes [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]]); resource -- Create a hard link  
  ldap_rename(resource link_identifier, string dn, string newrdn, string newparent, bool deleteoldrdn); bool -- Create a hard link  
  ldap_search(resource link_identifier, string base_dn, string filter [, array attributes [, int attrsonly [, int sizelimit [, int timelimit [, int deref]]]]]); resource -- Create a hard link  
  ldap_set_option(resource link_identifier, int option, mixed newval); bool -- Create a hard link  
  ldap_set_rebind_proc(resource link, string callback); bool -- Create a hard link  
  ldap_sort(resource link, resource result, string sortfilter); bool -- Create a hard link  
  ldap_start_tls(resource link); bool -- Create a hard link  
  ldap_t61_to_8859(string value); string -- Translate t61 characters to 8859 characters  
  ldap_unbind(resource link_identifier); bool -- Create a hard link  
  ezmlm_hash(string addr); int -- Calculate EZMLM list hash value.  
  mail(string to, string subject, string message [, string additional_headers [, string additional_parameters]]); bool -- Send an email message  
  mailparse_determine_best_xfer_encoding(resource fp); int -- Send an email message  
  mailparse_msg_create(); int -- Send an email message  
  mailparse_msg_extract_part_file(resource rfc2045, string filename [, string callbackfunc]); string -- Send an email message  
  mailparse_msg_extract_part(resource rfc2045, string msgbody [, string callbackfunc]); void -- Send an email message  
  mailparse_msg_free(resource rfc2045buf); void -- Send an email message  
  mailparse_msg_get_part_data(resource rfc2045); array -- Send an email message  
  mailparse_msg_get_part(resource rfc2045, string mimesection); int -- Send an email message  
  mailparse_msg_get_structure(resource rfc2045); array -- Send an email message  
  mailparse_msg_parse_file(string filename); resource -- Send an email message  
  mailparse_msg_parse(resource rfc2045buf, string data); void -- Send an email message  
  mailparse_rfc822_parse_addresses(string addresses); array -- Send an email message  
  mailparse_stream_encode(resource sourcefp, resource destfp, string encoding); bool -- Send an email message  
  mailparse_uudecode_all(resource fp); array -- Send an email message  
  abs(mixed number); mixed -- Return the absolute value of the number  
  acos(float arg); float -- Return the arc cosine of the number in radians  
  acosh(float arg); float -- Returns the inverse hyperbolic cosine of the number, i.e. the value whose hyperbolic cosine is number  
  asin(float arg); float -- Returns the arc sine of the number in radians  
  asinh(float arg); float -- Returns the inverse hyperbolic sine of the number, i.e. the value whose hyperbolic sine is number  
  atan(float arg); float -- Returns the arc tangent of the number in radians  
  atan2(float y, float x); float -- Returns the arc tangent of y/x, with the resulting quadrant determined by the signs of y and x  
  atanh(float arg); float -- Returns the inverse hyperbolic tangent of the number, i.e. the value whose hyperbolic tangent is number  
  base_convert(string number, int frombase, int tobase); string -- Converts a number in a string from any base <= 36 to any base <= 36  
  bindec(string binary_string); int -- Returns the decimal equivalent of the binary number  
  ceil(float value); float -- Returns the next highest integer value of the number  
  cos(float arg); float -- Returns the cosine of the number in radians  
  cosh(float arg); float -- Returns the hyperbolic cosine of the number, defined as (exp(number)      exp(-number))/2  
  decbin(int number); string -- Returns a string containing a binary representation of the number  
  dechex(int number); string -- Returns a string containing a hexadecimal representation of the given number  
  decoct(int number); string -- Returns a string containing an octal representation of the given number  
  deg2rad(float number); float -- Converts the number in degrees to the radian equivalent  
  exp(float arg); float -- Returns e raised to the power of the number  
  expm1(float number); float -- Returns exp(number) - 1, computed in a way that accurate even when the value of number is close to zero  
  floor(float value); float -- Returns the next lowest integer value from the number  
  getrandmax(); int -- Returns the maximum value a random number can have  
  hexdec(string hex_string); int -- Returns the decimal equivalent of the hexadecimal number  
  hypot(float num1, float num2); float -- Returns sqrt(num1*num1      num2*num2)  
  is_finite(float val); bool -- Returns whether argument is finite  
  is_infinite(float val); bool -- Returns whether argument is infinite  
  is_nan(float val); bool -- Returns whether argument is not a number  
  lcg_value(); float -- Returns a value from the combined linear congruential generator  
  log(float arg); float -- Returns the natural logarithm of the number, or the base log if base is specified  
  log10(float arg); float -- Returns the base-10 logarithm of the number  
  log1p(float number); float -- Returns log(1      number), computed in a way that accurate even when the value of number is close to zero  
  max(mixed arg1, mixed arg2, mixed argn); mixed -- Return the highest value in an array or a series of arguments  
  min(number arg1, number arg2 [, ...]); number -- Return the lowest value in an array or a series of arguments  
  mt_getrandmax(); int -- Returns the maximum value a random number from Mersenne Twister can have  
  mt_rand([int min, int max]); int -- Returns a random number from Mersenne Twister  
  mt_srand(int seed); void -- Seeds Mersenne Twister random number generator  
  octdec(string octal_string); int -- Returns the decimal equivalent of an octal string  
  pi(); float -- Returns an approximation of pi  
  pow(number base, number exp); number -- Returns base raised to the power of exponent. Returns integer result when possible  
  rad2deg(float number); float -- Converts the radian number to the equivalent number in degrees  
  rand([int min, int max]); int -- Returns a random number  
  round(float val [, int precision]); float -- Returns the number rounded to specified precision  
  sin(float arg); float -- Returns the sine of the number in radians  
  sinh(float arg); float -- Returns the hyperbolic sine of the number, defined as (exp(number) - exp(-number))/2  
  sqrt(float arg); float -- Returns the square root of the number  
  srand(int seed); void -- Seeds random number generator  
  tan(float arg); float -- Returns the tangent of the number in radians  
  tanh(float arg); float -- Returns the hyperbolic tangent of the number, defined as sinh(number)/cosh(number)  
  mb_convert_encoding(string str, string to-encoding [, mixed from-encoding]); string -- Returns converted string in desired encoding  
  mb_convert_kana(string str, string option [, mixed encoding]); string -- Conversion between full-width character and half-width character (Japanese)  
  mb_convert_variables(string to-encoding, mixed from-encoding, mixed vars); string -- Converts the string resource in variables to desired encoding  
  mb_decode_mimeheader(string str); string -- Decodes the MIME "encoded-word" in the string  
  mb_decode_numericentity(string str, array convmap [, string encoding]); string -- Converts HTML numeric entities to character code  
  mb_detect_encoding(string str [, mixed encoding-list]); string -- Encodings of the given string is returned (as a string)  
  mb_detect_order([mixed encoding-list]); array -- Sets the current detect_order or Return the current detect_order as a array  
  mb_encode_mimeheader(string str [, string charset [, string transfer-encoding [, string linefeed]]]); string -- Converts the string to MIME "encoded-word" in the format of =?charset?(B|Q)?encoded_string?=  
  mb_encode_numericentity(string str, array convmap [, string encoding]); string -- Converts specified characters to HTML numeric entities  
  mb_ereg_match(string pattern, string string [, string option]); bool -- Regular expression match for multibyte string  
  mb_ereg_replace(string pattern, string replacement, string string [, array option]); string -- Replace regular expression for multibyte string  
  mb_ereg_search_getpos(); array -- Get search start position  
  mb_ereg_search_getregs(); array -- Get matched substring of the last time  
  mb_ereg_search_init(string string [, string pattern [, string option]]); array -- Initialize string and regular expression for search.  
  mb_ereg_search_pos([string pattern [, string option]]); array -- Regular expression search for multibyte string  
  mb_ereg_search_regs([string pattern [, string option]]); array -- Regular expression search for multibyte string  
  mb_ereg_search_setpos(); array -- Set search start position  
  mb_ereg_search([string pattern [, string option]]); bool -- Regular expression search for multibyte string  
  mb_ereg(string pattern, string string [, array regs]); int -- Regular expression match for multibyte string  
  mb_eregi_replace(string pattern, string replace, string string); string -- Case insensitive replace regular expression for multibyte string  
  mb_eregi(string pattern, string string [, array regs]); int -- Case-insensitive regular expression match for multibyte string  
  mb_get_info([string type]); string -- Returns the current settings of mbstring  
  mb_http_input([string type]); string -- Returns the input encoding  
  mb_http_output([string encoding]); string -- Sets the current output_encoding or returns the current output_encoding as a string  
  mb_internal_encoding([string encoding]); string -- Sets the current internal encoding or Returns the current internal encoding as a string  
  mb_language([string language]); string -- Sets the current language or Returns the current language as a string  
  mb_output_handler(string contents, int status); string -- Give information about a file  
  mb_parse_str(string encoded_string [, array result]); boolean -- Parses GET/POST/COOKIE data and sets global variables  
  mb_preferred_mime_name(string encoding); string -- Return the preferred MIME name (charset) as a string  
  mb_regex_encoding([string encoding]); string -- Returns the current encoding for regex as a string.  
  mb_send_mail(string to, string subject, string message [, string additional_headers [, string additional_parameter]]); boolean -- *  Sends an email message with MIME scheme    
  mb_split(string pattern, string string [, int limit]); array -- split multibyte string into array by regular expression  
  mb_strcut(string str, int start [, int length [, string encoding]]); string -- Returns part of a string  
  mb_strimwidth(string str, int start, int width, string trimmarker [, string encoding]); string -- Strips whitespace from the beginning and end of a string  
  mb_strlen(string str [, string encoding]); string -- Get character numbers of a string  
  mb_strpos(string haystack, string needle [, int offset [, string encoding]]); int -- Find position of first occurrence of a string within another  
  mb_strrpos(string haystack, string needle [, string encoding]); int -- Find the last occurrence of a character in a string within another  
  mb_strwidth(string str [, string encoding]); int -- Gets terminal width of a string  
  mb_substitute_character([mixed substrchar]); mixed -- Returns part of a string  
  mb_substr(string str, int start [, int length [, string encoding]]); string -- Returns part of a string  
  mcal_append_event(int mcal_stream); int -- Append a new event to the calendar stream  
  mcal_close(int mcal_stream, int flags); int -- Close an MCAL stream  
  mcal_create_calendar(int stream, string calendar); string -- Create a new calendar  
  mcal_date_compare(int a_year, int a_month, int a_day, int b_year, int b_month, int b_day); int -- Returns <0, 0, >0 if a<b, a==b, a>b respectively  
  mcal_date_valid(int year, int month, int day); int -- Returns true if the date is a valid date  
  mcal_day_of_week(int year, int month, int day); int -- Returns the day of the week of the given date  
  mcal_(int year, int month, int day); int
  mcal_days_in_month(int month, int leap year); int -- Returns the number of days in the given month, needs to know if the year is a leap year or not  
  mcal_delete_calendar(int stream, string calendar); string -- Delete calendar  
  mcal_delete_event(int mcal_stream [, int event_id]); int -- Delete an event  
  mcal_event_add_attribute(int stream, string attribute, string value); void -- Add an attribute and value to an event  
  mcal_event_init(int stream); int -- Initialize a streams global event  
  mcal_event_set_alarm(int stream, int alarm); int -- Add an alarm to the streams global event  
  mcal_event_set_category(int stream, string category); int -- Attach a category to an event  
  mcal_event_set_class(int stream, int class); int -- Add an class to the streams global event  
  mcal_event_set_description(int stream, string description); int -- Attach a description to an event  
  mcal_event_set_end(int stream, int year, int month [, int day [, int hour [, int min [, int sec]]]]); int -- Return the lowest value in an array or a series of arguments  
  mcal_event_set_recur_daily(int stream, int year, int month, int day, int interval); int -- Create a daily recurrence  
  mcal_event_set_recur_monthly_mday(int stream, int year, int month, int day, int interval); int -- Create a monthly by day recurrence  
  mcal_event_set_recur_monthly_wday(int stream, int year, int month, int day, int interval); int -- Create a monthly by week recurrence  
  mcal_event_set_recur_none(int stream); int -- Create a daily recurrence  
  mcal_event_set_recur_weekly(int stream, int year, int month, int day, int interval, int weekdays); int -- Create a weekly recurrence  
  mcal_event_set_recur_yearly(int stream, int year, int month, int day, int interval); int -- Create a yearly recurrence  
  mcal_event_set_start(int stream, int year, int month [, int day [, int hour [, int min [, int sec]]]]); int -- Return the lowest value in an array or a series of arguments  
  mcal_event_set_title(int stream, string title); int -- Attach a title to an event  
  mcal_expunge(int stream); int -- Delete all events marked for deletion  
  mcal_fetch_current_stream_event(int stream); object -- Fetch the current event stored in the stream's event structure  
  mcal_fetch_event(int mcal_stream, int event_id [, int options]); object -- Fetch an event  
  mcal_is_leap_year(int year); int -- Returns true if year is a leap year, false if not  
  mcal_list_alarms(int mcal_stream [, int begin_year [, int begin_month [, int begin_day [, int end_year [, int end_month [, int end_day]]]]]]); array -- Advances array argument's internal pointer to the last element and return it  
  mcal_list_events(int mcal_stream, object begin_date [, object end_date]); array -- Advances array argument's internal pointer to the last element and return it  
  mcal_next_recurrence(int stream, int weekstart, array next); int -- Move array argument's internal pointer to the next element and return it  
  mcal_open(string calendar, string username, string password [, int options]); int -- Open an MCAL stream to a calendar  
  mcal_popen(string calendar, string username, string password [, int options]); int -- Open a persistent MCAL stream to a calendar  
  mcal_rename_calendar(int stream, string old_name, string new_name); string -- Rename a calendar  
  mcal_reopen(string calendar [, int options]); int -- Reopen MCAL stream to a new calendar  
  mcal_snooze(int id); int -- Snooze an alarm  
  mcal_store_event(int mcal_stream); int -- Store changes to an event  
  mcal_time_valid(int hour, int minutes, int seconds); int -- Return the lowest value in an array or a series of arguments  
  mcal_week_of_year(int day, int month, int year); int -- Returns the week number of the given date  
  mcrypt_cbc(int cipher, string key, string data, int mode [, string iv]); string -- Return the key of the element currently pointed to by the internal array pointer  
  mcrypt_cfb(int cipher, string key, string data, int mode, string iv); string -- Return the key of the element currently pointed to by the internal array pointer  
  mcrypt_create_iv(int size, int source); string -- Create an initialization vector (IV)  
  mcrypt_decrypt(string cipher, string key, string data, string mode [, string iv]); string -- Return the key of the element currently pointed to by the internal array pointer  
  mcrypt_ecb(int cipher, string key, string data, int mode); string -- Return the key of the element currently pointed to by the internal array pointer  
  mcrypt_enc_get_algorithms_name(resource td); string -- Returns the name of the algorithm specified by the descriptor td  
  mcrypt_enc_get_block_size(resource td); int -- Returns the block size of the cipher specified by the descriptor td  
  mcrypt_enc_get_iv_size(resource td); int -- Returns the size of the IV in bytes of the algorithm specified by the descriptor td  
  mcrypt_enc_get_key_size(resource td); int -- Returns the maximum supported key size in bytes of the algorithm specified by the descriptor td  
  mcrypt_enc_get_modes_name(resource td); string -- Returns the name of the mode specified by the descriptor td  
  mcrypt_enc_get_supported_key_sizes(resource td); array -- This function decrypts the crypttext  
  mcrypt_enc_is_block_algorithm_mode(resource td); bool -- Returns TRUE if the mode is for use with block algorithms  
  mcrypt_enc_is_block_algorithm(resource td); bool -- Returns TRUE if the alrogithm is a block algorithms  
  mcrypt_enc_is_block_mode(resource td); bool -- Returns TRUE if the mode outputs blocks  
  mcrypt_enc_self_test(resource td); bool -- This function runs the self test on the algorithm specified by the descriptor td  
  mcrypt_encrypt(string cipher, string key, string data, string mode [, string iv]); string -- Return the key of the element currently pointed to by the internal array pointer  
  mcrypt_generic_deinit(resource td); bool -- This function terminates encrypt specified by the descriptor td  
  mcrypt_generic_end(resource td); bool -- This function terminates encrypt specified by the descriptor td  
  mcrypt_generic_init(resource td, string key, string iv); int -- Return the key of the element currently pointed to by the internal array pointer  
  mcrypt_generic(resource td, string data); string -- This function encrypts the plaintext  
  mcrypt_get_block_size(int cipher); int -- Get the key size of cipher  
  mcrypt_get_cipher_name(int cipher); string -- Get the key size of cipher  
  mcrypt_get_iv_size(resource td); int -- Get the IV size of cipher (Usually the same as the blocksize)  
  mcrypt_get_key_size(int cipher); int -- Get the key size of cipher  
  mcrypt_list_algorithms([string lib_dir]); array -- List all algorithms in "module_dir"  
  mcrypt_list_modes([string lib_dir]); array -- List all modes "module_dir"  
  mcrypt_module_close(resource td); bool -- Free the descriptor td  
  mcrypt_module_get_algo_block_size(string algorithm [, string lib_dir]); int -- Returns the block size of the algorithm  
  mcrypt_module_get_algo_key_size(string algorithm [, string lib_dir]); int -- Returns the maximum supported key size of the algorithm  
  mcrypt_module_get_supported_key_sizes(string algorithm [, string lib_dir]); array -- This function decrypts the crypttext  
  mcrypt_module_is_block_algorithm_mode(string mode [, string lib_dir]); bool -- Returns TRUE if the mode is for use with block algorithms  
  mcrypt_module_is_block_algorithm(string algorithm [, string lib_dir]); bool -- Returns TRUE if the algorithm is a block algorithm  
  mcrypt_module_is_block_mode(string mode [, string lib_dir]); bool -- Returns TRUE if the mode outputs blocks of bytes  
  mcrypt_module_open(string algorithm, string algorithm_directory, string mode, string mode_directory); resource -- Opens the module of the algorithm and the mode to be used  
  mcrypt_module_self_test(string algorithm [, string lib_dir]); bool -- Does a self test of the module "module"  
  mcrypt_ofb(int cipher, string key, string data, int mode, string iv); string -- Return the key of the element currently pointed to by the internal array pointer  
  mdecrypt_generic(resource td, string data); string -- This function decrypts the plaintext  
  mcve_adduser(resource conn, string admin_password, int usersetup); int -- Add an MCVE user using usersetup structure  
  mcve_adduserarg(resource usersetup, int argtype, string argval); int -- Add a value to user configuration structure  
  mcve_bt(resource conn, string username, string password); int -- Get unsettled batch totals  
  mcve_checkstatus(resource conn, int identifier); int -- Check to see if a transaction has completed  
  mcve_chkpwd(resource conn, string username, string password); int -- Verify Password  
  mcve_chngpwd(resource conn, string admin_password, string new_password); int -- Change the system administrator's password  
  mcve_completeauthorizations(resource conn, int); int -- Number of complete authorizations in queue, returning an array of their identifiers  
  mcve_connect(resource conn); int -- Establish the connection to MCVE  
  mcve_deleteresponse(resource conn, int identifier); bool -- Delete specified transaction from MCVE_CONN structure  
  mcve_deleteusersetup(resource usersetup); void -- Deallocate data associated with usersetup structure  
  mcve_deluser(resource conn, string admin_password, string username); int -- Delete an MCVE user account  
  mcve_destroyconn(resource conn); void -- Destroy the connection and MCVE_CONN structure  
  mcve_destroyengine(); void -- Free memory associated with IP/SSL connectivity  
  mcve_disableuser(resource conn, string admin_password, string username); int -- Disable an active MCVE user account  
  mcve_edituser(resource conn, string admin_password, int usersetup); int -- Edit MCVE user using usersetup structure  
  mcve_enableuser(resource conn, string admin_password, string username); int -- Enable an inactive MCVE user account  
  mcve_force(); int -- Send a FORCE to MCVE.  (typically, a phone-authorization)  
  mcve_getcell(resource conn, int identifier, string column, int row); string -- Get a specific cell from a comma delimited response by column name  
  mcve_getcellbynum(resource conn, int identifier, int column, int row); string -- Get a specific cell from a comma delimited response by column number  
  mcve_getcommadelimited(resource conn, int identifier); string -- Get the RAW comma delimited data returned from MCVE  
  mcve_getheader(resource conn, int identifier, int column_num); string -- Get the name of the column in a comma-delimited response  
  mcve_getuserarg(resource usersetup, int argtype); string -- Grab a value from usersetup structure  
  mcve_gft(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate); int -- Give information about a file  
  mcve_gl(int conn, string username, string password, int type, string account, string batch, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate); int -- Give information about a file  
  mcve_gut(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate); int -- Give information about a file  
  mcve_initconn(); resource -- Create and initialize an MCVE_CONN structure  
  mcve_initengine(string location); int -- Ready the client for IP/SSL Communication  
  mcve_initusersetup(); resource -- Initialize structure to store user data  
  mcve_iscommadelimited(resource conn, int identifier); int -- Checks to see if response is comma delimited  
  mcve_liststats(resource conn, string admin_password); int -- List statistics for all users on MCVE system  
  mcve_listusers(resource conn, string admin_password); int -- List all users on MCVE system  
  mcve_monitor(resource conn); int -- Perform communication with MCVE (send/receive data)   Non-blocking  
  mcve_numcolumns(resource conn, int identifier); int -- Number of columns returned in a comma delimited response  
  mcve_numrows(resource conn, int identifier); int -- Number of rows returned in a comma delimited response  
  mcve_override(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum); int -- Returns e raised to the power of the number  
  mcve_parsecommadelimited(resource conn, int identifier); int -- Parse the comma delimited response so mcve_getcell, etc will work  
  mcve_preauth(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments); int -- Returns e raised to the power of the number  
  mcve_preauthcompletion(resource conn, string username, string password, float finalamount, int sid, int ptrannum); int -- Complete a PREAUTHORIZATION... Ready it for settlement  
  mcve_qc(resource conn, string username, string password, string clerkid, string stationid, string comments, int ptrannum); int -- Give information about a file  
  mcve_return(int conn, string username, string password, string trackdata, string account, string expdate, float amount, string comments, string clerkid, string stationid, int ptrannum); int -- Returns e raised to the power of the number  
  mcve_returncode(resource conn, int identifier); int -- Grab the exact return code from the transaction  
  mcve_returnstatus(resource conn, int identifier); int -- Check to see if the transaction was successful  
  mcve_sale(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, string stationid, int ptrannum); int -- Returns e raised to the power of the number  
  mcve_setdropfile(resource conn, string directory); int -- Directory class with properties, handle and class and methods read, rewind and close  
  mcve_setip(resource conn, string host, int port); int -- Set the connection method to IP  
  mcve_setssl(resource conn, string host, int port); int -- Set the connection method to SSL  
  mcve_settimeout(resource conn, int seconds); int -- Set maximum transaction time (per trans)   
  mcve_settle(resource conn, string username, string password, string batch); int -- Issue a settlement command to do a batch deposit  
  mcve_transactionauth(resource conn, int identifier); string -- Get the authorization number returned for the transaction (alpha-numeric)  
  mcve_transactionavs(resource conn, int identifier); int -- Get the Address Verification return status  
  mcve_transactionbatch(resource conn, int identifier); int -- Get the batch number associated with the transaction  
  mcve_transactioncv(resource conn, int identifier); int -- Get the CVC2/CVV2/CID return status  
  mcve_transactionid(resource conn, int identifier); int -- Get the unique system id for the transaction   
  mcve_transactionitem(resource conn, int identifier); int -- Get the ITEM number in the associated batch for this transaction  
  mcve_transactionssent(resource conn); int -- Check to see if outgoing buffer is clear  
  mcve_transactiontext(resource conn, int identifier); string -- Get verbiage (text) return from MCVE or processing institution  
  mcve_transinqueue(resource conn); int -- Number of transactions in client-queue  
  mcve_ub(resource conn, string username, string password); int -- Get a list of all Unsettled batches  
  mcve_void(resource conn, string username, string password, int sid, int ptrannum); int -- VOID a transaction in the settlement queue  
  mhash_count(); int -- Gets the number of available hashes  
  mhash_get_block_size(int hash); int -- Gets the block size of hash  
  mhash_get_hash_name(int hash); string -- Gets the name of hash  
  mhash_keygen_s2k(int hash, string password, string salt, int bytes); string -- Generates a key using hash functions  
  mhash(int hash, string data [, string key]); string -- Return the key of the element currently pointed to by the internal array pointer  
  mime_content_type(string filename); string -- Read entire file into an array  
  ming_setcubicthreshold(int threshold); void -- Return the lowest value in an array or a series of arguments  
  ming_setscale(int scale); void -- Return the lowest value in an array or a series of arguments  
  ming_useswfversion(int version); void -- Return the lowest value in an array or a series of arguments  
  swfaction(string script); new
  getheight(); int, class swfbitmap
  getwidth(); int, class swfbitmap
  swfbitmap(string filename [, int alphafilename]); new -- Read entire file into an array  
  swfbutton_keypress(string str); int -- Returns the action flag for keyPress(char)  
  connection_aborted(); int -- Returns true if client disconnected  
  connection_status(); int -- Returns the connection status bitfield  
  connection_timeout(); bool
  constant(string name); mixed -- Given the name of a constant this function will return the constants associated value  
  define(string name, mixed value [, bool case_insensitive]); bool -- Define a new constant  
  defined(string name); bool -- Check whether a constant exists  
  eval(string code_str); mixed
  exit([string status]); void -- Give information about a file  
  get_browser([string user_agent]); object -- Get information about the capabilities of a browser  
  highlight_file(string filename [, bool return]); mixed -- Read entire file into an array  
  highlight_string(string str [, bool return]); mixed -- Syntax highlight a string or optionally return it  
  ignore_user_abort([int setting]); int -- Set whether we want to ignore a user abort event or not  
  leak(int bytes); void -- Cause an intentional memory leak, for testing/debugging purposes  
  pack(string format [, mixed args]); string -- Takes one or more arguments and packs them into a binary string according to the format argument  
  show_source(string filename [, bool return]); bool -- Read entire file into an array  
  sleep(int seconds); void -- Delay for a given number of seconds  
  uniqid(string prefix [, bool lcg]); string -- Generates a unique ID  
  unpack(string format, string data); array -- Unpack binary string into named array elements according to format argument  
  usleep(int micro_seconds); void -- Delay for a given number of micro seconds  
  udm_add_search_limit(int agent, int var, string val); int -- Add mnoGoSearch search restrictions  
  udm_alloc_agent(string dbaddr [, string dbmode]); int -- Allocate mnoGoSearch session  
  udm_api_version(); int -- Get mnoGoSearch API version  
  udm_cat_list(int agent, string category); array -- Get mnoGoSearch categories list with the same root  
  udm_cat_path(int agent, string category); array -- Get mnoGoSearch categories path from the root to the given catgory  
  udm_check_charset(int agent, string charset); int -- Check if the given charset is known to mnogosearch  
  udm_check_stored(int agent, int link, string doc_id); int -- Create a hard link  
  udm_clear_search_limits(int agent); int -- Clear all mnoGoSearch search restrictions  
  udm_close_stored(int agent, int link); int -- Create a hard link  
  udm_crc32(int agent, string str); int -- Return CRC32 checksum of gived string  
  udm_errno(int agent); int -- Get mnoGoSearch error number  
  udm_error(int agent); string -- Get mnoGoSearch error message  
  udm_find(int agent, string query); int -- Perform search  
  udm_free_agent(int agent); int -- Free mnoGoSearch session  
  udm_free_ispell_data(int agent); int -- Free memory allocated for ispell data  
  udm_free_res(int res); int -- mnoGoSearch free result  
  udm_get_doc_count(int agent); int -- Get total number of documents in database  
  udm_get_res_field(int res, int row, int field); string -- Fetch mnoGoSearch result field  
  udm_get_res_param(int res, int param); string -- Get mnoGoSearch result parameters  
  udm_load_ispell_data(int agent, int var, string val1, string val2, int flag); int -- Load ispell data  
  udm_open_stored(int agent, string storedaddr); int -- Open connection to stored   
  udm_set_agent_param(int agent, int var, string val); int -- Set mnoGoSearch agent session parameters  
  msession_connect(string host, string port); bool -- Connect to msession sever  
  msession_count(); int -- Get session count  
  msession_create(string session); bool -- Create a session  
  msession_destroy(string name); bool -- Destroy a session  
  msession_disconnect(); void -- Disconnect from msession server  
  msession_find(string name, string value); array -- Find all sessions with name and value  
  msession_get_array(string session); array -- Get array of msession variables   
  msession_get(string session, string name, string value); string -- Get value from session  
  msession_getdata(string session); string -- Get value from session  
  msession_inc(string session, string name); string -- Increment value in session  
  msession_list(); array -- List all sessions   
  msession_listvar(string name); array -- return associative array of value;session for all sessions with a variable named 'name'  
  msession_lock(string name); int -- Lock a session  
  msession_plugin(string session, string val [, string param]); string -- Call the personality plugin escape function  
  msession_randstr(int param); string -- Get random string  
  msession_set_array(string session, array tuples); bool -- Set msession variables from an array 
  msession_set(string session, string name, string value); bool -- Set value in session  
  msession_setdata(string session, string value); bool -- Set value in session  
  msession_timeout(string session [, int param]); int -- Set/get session timeout  
  msession_uniq(int param); string -- Get uniq id  
  msession_unlock(string session, int key); int -- Return the key of the element currently pointed to by the internal array pointer  
  msql_affected_rows(int query_identifier); int -- Return number of affected rows  
  msql_close(int link_identifier); int -- Create a hard link  
  msql_connect([string hostname [, string server [, string username [, string password]]]]); int -- Open a connection to an mSQL Server  
  msql_create_db(string database name [, int link_identifier]); int -- Create a hard link  
  msql_createdb(string database name [, int link_identifier]); int -- Create a hard link  
  msql_data_seek(int query_identifier, int row_number); int -- Move internal result pointer  
  msql_dbname(int query_identifier, int i); string
  msql_drop_db(string database_name, int link_identifier); int -- Create a hard link  
  msql_error([int link_identifier]); string -- Create a hard link  
  msql_fetch_array(int query_identifier [, int result_type]); int -- Fetch a result row as an associative array  
  msql_fetch_field(int query_identifier, int field_offset); object -- Get column information from a result and return as an object  
  msql_fetch_object(int query_identifier [, int result_type]); int -- Fetch a result row as an object  
  msql_fetch_row(int query_identifier); array -- Get a result row as an enumerated array  
  msql_field_seek(int query_identifier, int field_offset); int -- Set result pointer to a specific field offset  
  msql_fieldflags(int query_identifier, int i); string
  msql_fieldlen(int query_identifier, int i); int
  msql_fieldname(int query_identifier, int field); string
  msql_fieldtable(int query_identifier, int field); int
  msql_fieldtype(int query_identifier, int i); string
  msql_free_result(int query_identifier); int -- Free result memory  
  msql_list_dbs(); int -- List databases available on an mSQL server  
  msql_list_fields(string database, string tablename); int -- List mSQL result fields  
  msql_list_tables(string database); int -- List tables in an mSQL database  
  msql_num_fields(int query_identifier); int -- Get number of fields in a result  
  msql_num_rows(int query_identifier); int -- Get number of rows in a result  
  msql_numfields(int query_identifier); int
  msql_numrows(); int
  msql_pconnect([string server [, string username [, string password]]]); int -- Open a persistent connection to an mSQL Server  
  msql_query(string query, int link_identifier); int -- Create a hard link  
  msql_result(int query_identifier, int i, mixed field); int -- Get result data  
  msql_select_db(string database_name, int link_identifier); int -- Create a hard link  
  msql_tablename(int query_identifier, int field); string
  msql(string database, string query, int link_identifier); int -- Create a hard link  
  mssql_bind(int stmt, string param_name, mixed var, int type [, int is_output [, int is_null [, int maxlen]]]); int -- Returns true if variable is null  
  mssql_close([int link_identifier]); int -- Create a hard link  
  mssql_connect([string servername [, string username [, string password]]]); int -- Establishes a connection to a MS-SQL server  
  mssql_data_seek(int result_identifier, int row_number); int -- Moves the internal row pointer of the MS-SQL result associated with the specified result identifier to pointer to the specified row number  
  mssql_execute(int stmt); int -- Executes a stored procedure on a MS-SQL server database  
  mssql_fetch_array(int result); array -- Returns an associative array of the current row in the result set specified by result_id  
  mssql_fetch_assoc(int result_id [, int result_type]); array -- Returns an associative array of the current row in the result set specified by result_id  
  mssql_fetch_batch(string result_index); int -- Returns the next batch of records  
  mssql_fetch_field(int result [, int field_offset]); object -- Gets information about certain fields in a query result  
  mssql_fetch_object(int result); int -- Returns a psuedo-object of the current row in the result set specified by result_id  
  mssql_fetch_row(int result); array -- Returns an array of the current row in the result set specified by result_id  
  mssql_field_length(int result [, int offset]); int -- Get the length of a MS-SQL field  
  mssql_field_name(int result [, int offset]); int -- Returns the name of the field given by offset in the result set given by result_id  
  mssql_field_seek(int result, int field_offset); int -- Seeks to the specified field offset  
  mssql_field_type(int result [, int offset]); string -- Returns the type of a field  
  mssql_free_result(int result); int -- Free a MS-SQL result index  
  mssql_get_last_message(); string -- Gets the last message from the MS-SQL server  
  mssql_guid_string(string binary [, int short_format]); string -- Converts a 16 byte binary GUID to a string   
  mssql_init(string sp_name [, int conn_id]); int -- Initializes a stored procedure or a remote stored procedure   
  mssql_min_error_severity(int severity); void -- Sets the lower error severity  
  mssql_min_message_severity(int severity); void -- Sets the lower message severity  
  mssql_next_result(int result_id); bool -- Move the internal result pointer to the next result  
  mssql_num_fields(int result); int -- Returns the number of fields fetched in from the result id specified  
  mssql_num_rows(string result); int -- Returns the number of rows fetched in from the result id specified  
  mssql_pconnect([string servername [, string username [, string password]]]); int -- Establishes a persistent connection to a MS-SQL server  
  mssql_query(string query [, int link_identifier]); int -- Create a hard link  
  mssql_result(int result, int i, mixed field); int -- Returns the contents of one cell from a MS-SQL result set  
  mssql_rows_affected(int conn_id); int -- Returns the number of records affected by the query  
  mssql_select_db(string database_name [, int link_identifier]); int -- Create a hard link  
  muscat_close(resource muscat_handle); int
  muscat_get(resource muscat_handle); string
  muscat_give(resource muscat_handle, string string); int
  muscat_setup_net(string muscat_host, int port); resource
  muscat_setup(int size [, string muscat_dir]); resource
  mysql_affected_rows([resource link_identifier]); int -- Create a hard link  
  mysql_change_user(string user, string password [, string database [, resource link_identifier]]); int -- Create a hard link  
  mysql_client_encoding([resource link_identifier]); int -- Create a hard link  
  mysql_close([resource link_identifier]); bool -- Create a hard link  
  mysql_connect([string server [, string username [, string password [, bool new_link [, int client_flags]]]]]); resource -- Opens a connection to a MySQL Server  
  mysql_create_db(string database name [, resource link_identifier]); bool -- Create a hard link  
  mysql_data_seek(resource result_identifier, int row_number); bool -- Move internal result pointer  
  mysql_db_name(resource result, int row [, mixed field]); string
  mysql_db_query(string database, string query [, resource link_identifier]); resource -- Create a hard link  
  mysql_drop_db(string database_name [, resource link_identifier]); bool -- Create a hard link  
  mysql_errno([resource link_identifier]); int -- Create a hard link  
  mysql_error([resource link_identifier]); string -- Create a hard link  
  mysql_escape_string(string unescaped_string); string -- Escape string for mysql query  
  mysql_fetch_array(resource result [, int result_type]); array -- Fetch a result row as an array (associative, numeric or both)  
  mysql_fetch_assoc(resource result); array -- Fetch a result row as an associative array  
  mysql_fetch_field(resource result [, int field_offset]); object -- Gets column information from a result and return as an object  
  mysql_fetch_lengths(resource result); array -- Gets max data size of each column in a result  
  mysql_fetch_object(resource result); object -- Fetch a result row as an object  
  mysql_fetch_row(resource result); array -- Gets a result row as an enumerated array  
  mysql_field_flags(resource result, int field_offset); string -- Gets the flags associated with the specified field in a result  
  mysql_field_len(resource result, int field_offset); int -- Returns the length of the specified field  
  mysql_field_name(resource result, int field_index); string -- Gets the name of the specified field in a result  
  mysql_field_seek(resource result, int field_offset); int -- Sets result pointer to a specific field offset  
  mysql_field_table(resource result, int field_offset); string -- Gets name of the table the specified field is in  
  mysql_field_type(resource result, int field_offset); string -- Gets the type of the specified field in a result  
  mysql_free_result(resource result); bool -- Free result memory  
  mysql_get_client_info(); string -- Returns a string that represents the client library version  
  mysql_get_host_info([resource link_identifier]); string -- Create a hard link  
  mysql_get_proto_info([resource link_identifier]); int -- Create a hard link  
  mysql_get_server_info([resource link_identifier]); string -- Create a hard link  
  mysql_info([resource link_identifier]); string -- Create a hard link  
  mysql_insert_id([resource link_identifier]); int -- Create a hard link  
  mysql_list_dbs([resource link_identifier]); resource -- Create a hard link  
  mysql_list_fields(string database_name, string table_name [, resource link_identifier]); resource -- Create a hard link  
  mysql_list_processes([resource link_identifier]); resource -- Create a hard link  
  mysql_list_tables(string database [, resource link_identifier]); resource -- Create a hard link  
  mysql_num_fields(resource result); int -- Gets number of fields in a result  
  mysql_num_rows(resource result); int -- Gets number of rows in a result  
  mysql_pconnect([string server [, string username [, string password [, int client_flags]]]]); resource -- Opens a persistent connection to a MySQL Server  
  mysql_ping([resource link_identifier]); bool -- Create a hard link  
  mysql_query(string query [, resource link_identifier [, int result_mode]]); resource -- Create a hard link  
  mysql_real_escape_string(string unescaped_string [, resource link_identifier]); string -- Create a hard link  
  mysql_result(resource result, int row [, mixed field]); mixed -- Gets result data  
  mysql_select_db(string database_name [, resource link_identifier]); bool -- Create a hard link  
  mysql_stat([resource link_identifier]); string -- Create a hard link  
  mysql_tablename(resource result, int i); string
  mysql_thread_id([resource link_identifier]); int -- Create a hard link  
  mysql_unbuffered_query(string query [, resource link_identifier [, int result_mode]]); resource -- Create a hard link  
  ncurses_addch(int ch); int -- Adds character at current position and advance cursor  
  ncurses_addchnstr(string s, int n); int -- Adds attributed string with specified length at current position  
  ncurses_addchstr(string s); int -- Adds attributed string at current position  
  ncurses_addnstr(string s, int n); int -- Adds string with specified length at current position  
  ncurses_addstr(string text); int -- Outputs text at current position  
  ncurses_assume_default_colors(int fg, int bg); int -- Defines default colors for color 0  
  ncurses_attroff(int attributes); int -- Turns off the given attributes  
  ncurses_attron(int attributes); int -- Turns on the given attributes  
  ncurses_attrset(int attributes); int -- Sets given attributes  
  ncurses_baudrate(); int -- Returns baudrate of terminal  
  ncurses_beep(); int -- Let the terminal beep  
  ncurses_bkgd(int attrchar); int -- Sets background property for terminal screen  
  ncurses_bkgdset(int attrchar); void -- Controls screen background  
  ncurses_border(int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner); int -- Draws a border around the screen using attributed characters  
  ncurses_can_change_color(); bool -- Checks if we can change terminals colors  
  ncurses_cbreak(); bool -- Switches of input buffering  
  ncurses_clear(); bool -- Clears screen  
  ncurses_clrtobot(); bool -- Clears screen from current position to bottom  
  ncurses_clrtoeol(); bool -- Clears screen from current position to end of line  
  ncurses_color_set(int pair); int -- Sets fore- and background color  
  ncurses_curs_set(int visibility); int -- Sets cursor state  
  ncurses_def_prog_mode(); bool -- Saves terminals (program) mode  
  ncurses_def_shell_mode(); bool -- Saves terminal (shell) mode 
  ncurses_define_key(string definition, int keycode); int -- Return the key of the element currently pointed to by the internal array pointer  
  ncurses_delay_output(int milliseconds); int -- Delays output on terminal using padding characters  
  ncurses_delch(); bool -- Deletes character at current position, move rest of line left  
  ncurses_deleteln(); bool -- Deletes line at current position, move rest of screen up  
  ncurses_delwin(resource window); int -- Deletes a ncurses window  
  ncurses_doupdate(); bool -- Writes all prepared refreshes to terminal  
  ncurses_echo(); bool -- Activates keyboard input echo  
  ncurses_echochar(int character); int -- Single character output including refresh  
  ncurses_end(); int -- Stops using ncurses, clean up the screen  
  ncurses_erase(); bool -- Erases terminal screen  
  ncurses_erasechar(); string -- Returns current erase character  
  ncurses_filter(); int --   ncurses_flash(); bool -- Flashes terminal screen (visual bell)  
  ncurses_flushinp(); bool -- Flushes keyboard input buffer  
  ncurses_getch(); int -- Reads a character from keyboard  
  ncurses_getmouse(array mevent); bool -- Reads mouse event from queue  
  ncurses_halfdelay(int tenth); int -- Puts terminal into halfdelay mode  
  ncurses_has_colors(); bool -- Checks if terminal has colors  
  ncurses_has_ic(); bool -- Checks for insert- and delete-capabilities  
  ncurses_has_il(); bool -- Checks for line insert- and delete-capabilities  
  ncurses_has_key(int keycode); int -- Return the key of the element currently pointed to by the internal array pointer  
  ncurses_hline(int charattr, int n); int -- Draws a horizontal line at current position using an attributed character and max. n characters long  
  ncurses_inch(); string -- Gets character and attribute at current position  
  ncurses_init_color(int color, int r, int g, int b); int -- Sets new RGB value for color  
  ncurses_init_pair(int pair, int fg, int bg); int -- Allocates a color pair  
  ncurses_init(); int -- Initializes ncurses  
  ncurses_insch(int character); int -- Inserts character moving rest of line including character at current position  
  ncurses_insdelln(int count); int -- Count the number of elements in a variable (usually an array)  
  ncurses_insertln(); bool -- Inserts a line, move rest of screen down  
  ncurses_insstr(string text); int -- Inserts string at current position, moving rest of line right  
  ncurses_instr(string buffer); int -- Reads string from terminal screen  
  ncurses_isendwin(); bool -- Ncurses is in endwin mode, normal screen output may be performed  
  ncurses_keyok(int keycode, bool enable); int -- Return the key of the element currently pointed to by the internal array pointer  
  ncurses_killchar(); bool -- Returns current line kill character  
  ncurses_longname(); string -- Returns terminal description  
  ncurses_mouseinterval(int milliseconds); int -- Sets timeout for mouse button clicks  
  ncurses_mousemask(int newmask, int oldmask); int -- Returns and sets mouse options  
  ncurses_move(int y, int x); int -- Moves output position  
  ncurses_mvaddch(int y, int x, int c); int -- Moves current position and add character  
  ncurses_mvaddchnstr(int y, int x, string s, int n); int -- Moves position and add attrributed string with specified length  
  ncurses_mvaddchstr(int y, int x, string s); int -- Moves position and add attributed string  
  ncurses_mvaddnstr(int y, int x, string s, int n); int -- Moves position and add string with specified length  
  ncurses_mvaddstr(int y, int x, string s); int -- Moves position and add string  
  ncurses_mvcur(int old_y, int old_x, int new_y, int new_x); int -- Moves cursor immediately  
  ncurses_mvdelch(int y, int x); int -- Moves position and delete character, shift rest of line left  
  ncurses_mvgetch(int y, int x); int -- Moves position and get character at new position  
  ncurses_mvhline(int y, int x, int attrchar, int n); int -- Sets new position and draw a horizontal line using an attributed character and max. n characters long  
  ncurses_mvinch(int y, int x); int -- Moves position and get attributed character at new position  
  ncurses_mvvline(int y, int x, int attrchar, int n); int -- Sets new position and draw a vertical line using an attributed character and max. n characters long  
  ncurses_mvwaddstr(resource window, int y, int x, string text); int -- Adds string at new position in window  
  ncurses_napms(int milliseconds); int -- Sleep  
  ncurses_newwin(int rows, int cols, int y, int x); int -- Creates a new window  
  ncurses_nl(); bool -- Translates newline and carriage return / line feed  
  ncurses_nocbreak(); bool -- Switches terminal to cooked mode  
  ncurses_noecho(); bool -- Switches off keyboard input echo  
  ncurses_nonl(); bool -- Do not ranslate newline and carriage return / line feed  
  ncurses_noqiflush(); int -- Do not flush on signal characters 
  ncurses_noraw(); bool -- Switches terminal out of raw mode  
  ncurses_putp(string text); int -- ???  
  ncurses_qiflush(); int -- Flushes on signal characters  
  ncurses_raw(); bool -- Switches terminal into raw mode  
  ncurses_refresh(int ch); int -- Refresh screen  
  ncurses_resetty(); bool -- Restores saved terminal state  
  ncurses_savetty(); bool -- Saves terminal state  
  ncurses_scr_dump(string filename); int -- Read entire file into an array  
  ncurses_scr_init(string filename); int -- Read entire file into an array  
  ncurses_scr_restore(string filename); int -- Read entire file into an array  
  ncurses_scr_set(string filename); int -- Read entire file into an array  
  ncurses_scrl(int count); int -- Count the number of elements in a variable (usually an array)  
  ncurses_slk_attr(); bool -- Returns current soft label keys attribute  
  ncurses_slk_attroff(int intarg); int -- ???  
  ncurses_slk_attron(int intarg); int -- ???  
  ncurses_slk_attrset(int intarg); int -- ???  
  ncurses_slk_clear(); bool -- Clears soft label keys from screen  
  ncurses_slk_color(int intarg); int -- Sets color for soft label keys 
  ncurses_slk_init(int format); bool -- Inits soft label keys  
  ncurses_slk_noutrefresh(); bool -- Copies soft label keys to virtual screen  
  ncurses_slk_refresh(); bool -- Copies soft label keys to screen  
  ncurses_slk_restore(); bool -- Restores soft label keys  
  ncurses_slk_touch(); bool -- Forces output when ncurses_slk_noutrefresh is performed  
  ncurses_standend(); int -- Stops using 'standout' attribute  
  ncurses_standout(); int -- Starts using 'standout' attribute  
  ncurses_start_color(); int -- Starts using colors  
  ncurses_termattrs(); bool -- Returns a logical OR of all attribute flags supported by terminal  
  ncurses_termname(); string -- Returns terminal name  
  ncurses_timeout(int millisec); void -- Sets timeout for special key sequences  
  ncurses_typeahead(int fd); int -- Specifys different filedescriptor for typeahead checking  
  ncurses_ungetch(int keycode); int -- Return the key of the element currently pointed to by the internal array pointer  
  ncurses_ungetmouse(array mevent); bool -- Pushes mouse event to queue  
  ncurses_use_default_colors(); bool -- Assigns terminal default colors to color id -1  
  ncurses_use_env(bool flag); void -- Controls use of environment information about terminal size  
  ncurses_use_extended_names(bool flag); int -- Controls use of extended names in terminfo descriptions  
  ncurses_vidattr(int intarg); int -- ???  
  ncurses_vline(int charattr, int n); int -- Draws a vertical line at current position using an attributed character and max. n characters long  
  ncurses_wrefresh(resource window); int -- Refreshes window on terminal screen  
  checkdnsrr(string host [, string type]); int
  closelog(); int -- Close connection to system logger  
  debugger_off(); int
  debugger_on(string address); int
  define_syslog_variables(); void -- Define a new constant  
  fsockopen(string hostname, int port [, int errno [, string errstr [, float timeout]]]); int -- Open Internet or Unix domain socket connection  
  gethostbyaddr(string ip_address); string -- Get the Internet host name corresponding to a given IP address  
  gethostbyname(string hostname); string -- Get the IP address corresponding to a given Internet host name  
  gethostbynamel(string hostname); array -- Return a list of IP addresses that a given hostname resolves to.  
  getmxrr(string hostname, array mxhosts [, array weight]); int
  getprotobyname(string name); int -- Returns protocol number associated with name as per /etc/protocols  
  getprotobynumber(int number); string -- Returns protocol name associated with protocol number proto  
  getservbyname(string service, string protocol); int -- Returns port associated with service. Protocol must be "tcp" or "udp"  
  getservbyport(int port, string protocol); string -- Returns service name associated with port. Protocol must be "tcp" or "udp"  
  ip2long(string ip_address); int -- Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address  
  long2ip(int proper_address); string -- Converts an (IPv4) Internet network address into a string in Internet standard dotted format  
  openlog(string ident, int option, int facility); int -- Open connection to system logger  
  pfsockopen(string hostname, int port [, int errno [, string errstr [, int timeout]]]); int -- Open persistent Internet or Unix domain socket connection  
  syslog(int priority, string message); int -- Generate a system log message  
  yp_all(string domain, string map, string callback); void -- Traverse the map and call a function on each entry  
  yp_cat(string domain, string map); array -- Return an array containing the entire map  
  yp_err_string(); string -- Returns the corresponding error string for the given error code  
  yp_errno(); int -- Returns the error code from the last call or 0 if no error occured  
  yp_first(string domain, string map); array -- Returns the first key as array with $var[$key] and the the line as the value  
  yp_get_default_domain(); int -- Returns the domain or false  
  yp_master(string domain, string map); string -- Returns the machine name of the master  
  yp_match(string domain, string map, string key); string -- Returns the matched line or false  
  yp_next(string domain, string map, string key); array -- Returns an array with $var[$key] and the the line as the value  
  yp_order(string domain, string map); int -- Returns the order number or false  
  notes_body(string server, string mailbox, int msg_number); array -- Send an email message  
  notes_copy_db(string from_database_name, string to_database_name); string -- Creates a note using form form_name  
  notes_create_db(string database_name); bool -- Creates a Lotus Notes database  
  notes_create_note(string database_name, string form_name); string -- Creates a note using form form_name  
  notes_drop_db(string database_name); bool -- Drops a Lotus Notes database  
  notes_find_note(string database_name, string name [, string type]); bool -- Returns a note id found in database_name  
  notes_header_info(string server, string mailbox, int msg_number); object -- Send an email message  
  notes_list_msgs(string db); bool -- ???  
  notes_mark_read(string database_name, string user_name, string note_id); string -- Marks a note_id as read for the User user_name.  Note; user_name must be fully distinguished user name  
  notes_mark_unread(string database_name, string user_name, string note_id); string -- Marks a note_id as unread for the User user_name.  Note; user_name must be fully distinguished user name  
  notes_nav_create(string database_name, string name); bool -- Creates a navigator name, in database_name  
  notes_search(string database_name, string keywords); string -- Return the key of the element currently pointed to by the internal array pointer  
  notes_unread(string database_name, string user_name); string -- Returns the unread note id's for the current User user_name.  Note; user_name must be fully distinguished user name  
  notes_version(string database_name); string -- Gets the Lotus Notes version  
  aggregate_methods_by_list(object object, string class_name, array methods_list [, boolean exclude]); void --   aggregate_methods_by_regexp(object object, string class_name, string regexp [, boolean exclude]); void --   aggregate_methods(object object, string class_name); void --   aggregate_properties_by_list(object object, string class_name, array properties_list [, boolean exclude]); void --   aggregate_properties_by_regexp(object object, string class_name, string regexp [, boolean exclude]); void --   aggregate_properties(object object, string class_name); void --   aggregate(object object, string class_name); void --   aggregation_info(object object); array --   object_aggregation(object object [, string class_name]); void
  OCIBindByName(int stmt, string ph_name, mixed & variable, int length [, int type]); int
  OCICancel(int stmt); int
  OCICollAppend(object collection, object object); string
  OCICollAssign(object collection, object object); string
  OCICollAssignElem(object collection, string ndx, string val); string
  OCICollGetElem(object collection, string ndx); string
  OCICollMax(object collection); string
  OCICollSize(object collection); string
  OCICollTrim(object collection, int num); string
  OCIColumnIsNULL(int stmt, mixed column); int
  OCIColumnName(int stmt, int col); string
  OCIColumnPrecision(int stmt, int col); int
  OCIColumnScale(int stmt, int col); int
  OCIColumnSize(int stmt, mixed column); int
  OCIColumnType(int stmt, int col); mixed
  OCIColumnTypeRaw(int stmt, int col); mixed
  OCICommit(int connection); int
  OCIDefineByName(int stmt, string Column-Name, mixed variable [, int type]); int
  OCIError([int stmt|conn|global]); array
  OCIExecute(int statement [, int mode]); int -- Give information about a file  
  OCIFetch(int statement); int -- Give information about a file  
  OCIFetchInto(int stmt, array & result [, int mode]); int
  OCIFetchStatement(int stmt, array & variable); int
  OCIFreeCollection(object lob); string
  OCIFreeCursor(int stmt); int
  OCIFreeDesc(object lob); int
  OCIFreeStatement(int stmt); int
  OCIInternalDebug(int onoff); void
  OCILoadLob(object lob); string
  OCILogOff(int connection); int
  OCILogon(string username, string password [, string db]); int
  OCINewCollection(int conn, string tdo [, string shema]); string
  OCINewCursor(int conn); int
  OCINewDescriptor(int connection [, int type]); string
  OCINLogon(string username, string password [, string db]); int
  OCINumCols(int stmt); int
  OCIParse(int conn, string query); int
  OCIPLogon(string username, string password [, string db]); int
  OCIResult(int statement, mixed column); mixed -- Give information about a file  
  OCIRollback(int connection); int
  OCIRowCount(int statement); int -- Give information about a file  
  OCISaveLob(object lob); string
  OCISaveLobFile(object lob); string
  OCIServerVersion(int conn); string
  OCISetPrefetch(int stmt, int rows); int
  OCIStatementType(int stmt); string
  OCIWriteLobToFile(object lob [, string filename [, int start [, int lenght]]]); void -- Read entire file into an array  
  openssl_csr_export_to_file(resource csr, string outfilename [, bool notext]); bool -- Exports a CSR to file  
  openssl_csr_export(resource csr, string out [, bool notext]); bool -- Exports a CSR to file or a var  
  openssl_csr_new(array dn, resource privkey [, array extraattribs [, array configargs]]); bool -- Generates a privkey and CSR  
  openssl_csr_sign(mixed csr, mixed x509, mixed priv_key, long days); resource -- Signs a cert with another CERT  
  openssl_error_string(); mixed -- Returns a description of the last error, and alters the index of the error messages. Returns false when the are no more messages  
  openssl_free_key(resource key_identifier); void -- Return the key of the element currently pointed to by the internal array pointer  
  openssl_get_privatekey(mixed key [, string passphrase]); resource -- Return the key of the element currently pointed to by the internal array pointer  
  openssl_get_publickey(mixed certificate); resource
  openssl_open(string sealed_data, string open_data, string env_key, mixed priv_key_id); bool -- Opens data  
  openssl_pkcs7_decrypt(string infilename, string outfilename, mixed recipcert, mixed recipkey); bool -- Decrypts the S/MIME message in the file name infilename and output the results to the file name outfilename.  recipcert is a CERT for one of the recipients. recipkey specifies the private key matching recipcert, if recipcert does not include the key  
  openssl_pkcs7_encrypt(string infile, string outfile, mixed recipcerts, array headers [, long flags]); bool -- Sends a raw HTTP header  
  openssl_pkcs7_sign(string infilename, string outfilename, mixed signcert, mixed privkey, array headers [, long flags [, string extracertsfilename]]); bool -- Sends a raw HTTP header  
  openssl_pkcs7_verify(string filename, int flags [, string outfilename [, array cainfo [, string extracerts]]]); bool -- Read entire file into an array  
  openssl_pkey_export_to_file(mixed key, string outfilename [, string passphrase [, array config_args]]); bool -- Return the key of the element currently pointed to by the internal array pointer  
  openssl_pkey_export(mixed key, mixed out [, string passphrase [, array config_args]]); bool -- Return the key of the element currently pointed to by the internal array pointer  
  openssl_pkey_new([array configargs]); resource -- Generates a new private key  
  openssl_private_decrypt(string data, string crypted, mixed key [, int padding]); bool -- Encrypt a string  
  openssl_private_encrypt(string data, string crypted, mixed key [, int padding]); bool -- Encrypt a string  
  openssl_public_decrypt(string data, string crypted, resource key [, int padding]); bool -- Encrypt a string  
  openssl_public_encrypt(string data, string crypted, mixed key [, int padding]); bool -- Encrypt a string  
  openssl_seal(string data, string sealed_data, array env_keys, array pub_key_ids); int -- Seals data  
  openssl_sign(string data, string signature, mixed priv_key_id); bool -- Signs data  
  openssl_verify(string data, string signature, mixed pub_key_id); int -- Verifys data  
  openssl_x509_check_private_key(mixed cert, mixed key); bool -- Return the key of the element currently pointed to by the internal array pointer  
  openssl_x509_checkpurpose(mixed x509cert, int purpose, array cainfo [, string untrustedfile]); bool -- Checks the CERT to see if it can be used for the purpose in purpose. cainfo holds information about trusted CAs  
  openssl_x509_export_to_file(mixed x509, string outfilename [, bool notext]); bool -- Exports a CERT to file or a var  
  openssl_x509_export(mixed x509, string outfilename [, bool notext]); bool -- Exports a CERT to file or a var  
  openssl_x509_free(resource x509cert); void -- Frees X.509 certificates  
  openssl_x509_parse(mixed x509cert [, bool shortnames]); array -- Returns an array of the fields/values of the CERT  
  openssl_x509_read(mixed x509certdata); resource -- Reads X.509 certificates  
  ora_bind(int cursor, string PHP variable name, string SQL parameter name, int length [, int type]); int -- Bind a PHP variable to an Oracle parameter  
  ora_close(int cursor); int -- Close an Oracle cursor  
  Ora_ColumnName(int cursor, int column); string
  Ora_ColumnSize(int cursor, int column); int
  Ora_ColumnType(int cursor, int column); string
  ora_commit(int conn); int -- Commit an Oracle transaction  
  ora_commitoff(int conn); int -- Disable automatic commit  
  ora_commiton(int conn); int -- Enable automatic commit  
  ora_do(int conn, string query); int -- Parse and execute a statement and fetch first result row  
  Ora_Error(int cursor_or_connection); string
  Ora_ErrorCode(int cursor_or_connection); int
  ora_exec(int cursor); int -- Execute a parsed statement  
  ora_fetch_into(int cursor, array result [, int flags]); int -- Fetch a row into the specified result array  
  ora_fetch(int cursor); int -- Fetch a row of result data from a cursor  
  ora_getcolumn(int cursor, mixed column); mixed -- Get data from a fetched row  
  ora_logoff(int connection); int -- Close an Oracle connection  
  ora_logon(string user, string password); int -- Open an Oracle connection  
  ora_numcols(int cursor_ind); int -- Returns the numbers of columns in a result  
  ora_numrows(int cursor_ind); int -- Returns the number of rows in a result  
  ora_open(int connection); int -- Open an Oracle cursor  
  ora_parse(int cursor_ind, string sql_statement, int defer); int -- Parse an Oracle SQL statement  
  ora_plogon(string user, string password); int -- Open a persistent Oracle connection  
  ora_rollback(int connection); int -- Roll back an Oracle transaction  
  flush(); void -- Flush the output buffer  
  ob_clean(); void -- Clean (delete) the current output buffer  
  ob_end_clean(); void -- Clean the output buffer, and delete current output buffer  
  ob_end_flush(); void -- Flush (send) the output buffer, and delete current output buffer  
  ob_flush(); void -- Flush (send) contents of the output buffer. The last buffer content is sent to next buffer  
  ob_get_contents(); string -- Return the contents of the output buffer  
  ob_get_length(); string -- Return the length of the output buffer  
  ob_get_level(); int -- Return the nesting level of the output buffer  
  ob_get_status([bool full_status]); array -- Return the status of the active or all output buffers  
  ob_gzhandler(string buffer [, int mode]); string -- Encode str based on accept-encoding setting - designed to be called from ob_start()  
  ob_implicit_flush([int flag]); void -- Turn implicit flush on/off and is equivalent to calling flush() after every output call  
  ob_start([string output_callback]); void -- Turn on Output Buffering (specifying an optional output handler).  
  overload([string class_name]); void -- Enables property and method call overloading for a class.  
  ovrimos_close(int connection); void -- Close a connection  
  ovrimos_commit(int connection_id); int -- Commit an ovrimos transaction  
  ovrimos_connect(string host, string db, string user, string password); int -- Connect to an Ovrimos database  
  ovrimos_cursor(int result_id); int -- Get cursor name  
  ovrimos_exec(int connection_id, string query); int -- Prepare and execute an SQL statement  
  ovrimos_execute(int result_id [, array parameters_array]); bool -- Execute a prepared statement  
  ovrimos_fetch_into(int result_id, array result_array [, string how [, int rownumber]]); bool -- Fetch one result row into an array     how; 'Next' (default), 'Prev', 'First', 'Last', 'Absolute'      
  ovrimos_fetch_row(int result_id [, int how [, int row_number]]); bool -- how; 'Next' (default), 'Prev', 'First', 'Last', 'Absolute'     Fetch a row  
  ovrimos_field_len(int result_id, int field_number); int -- Get the length of a column  
  ovrimos_field_name(int result_id, int field_number); int -- Get a column name  
  ovrimos_field_num(int result_id, string field_name); int -- Return column number  
  ovrimos_field_type(int result_id, int field_number); int -- Get the datatype of a column  
  ovrimos_free_result(int result_id); bool -- Free resources associated with a result  
  ovrimos_longreadlen(int result_id, int length); int -- Handle LONG columns  
  ovrimos_num_fields(int result_id); int -- Get number of columns in a result  
  ovrimos_num_rows(int result_id); int -- Get number of rows in a result  
  ovrimos_prepare(int connection_id, string query); int -- Prepares a statement for execution  
  ovrimos_result_all(int result_id [, string format]); bool -- Print result as HTML table  
  ovrimos_result(int result_id, mixed field); int -- Get result data  
  ovrimos_rollback(int connection_id); int -- Rollback a transaction  
  pcntl_exec(string path [, array args [, array envs]]); bool -- Executes specified program in current process space as defined by exec(2)  
  pcntl_fork(); int -- Forks the currently running process following the same behavior as the UNIX fork() system call 
  pcntl_signal(int signo, mixed handle); bool -- Assigns a system signal handler to a PHP function  
  pcntl_waitpid(int pid, int status, int options); int -- Returns an approximation of pi  
  pcntl_wexitstatus(int status); int -- Give information about a file  
  pcntl_wifexited(int status); int -- Give information about a file  
  pcntl_wifsignaled(int status); int -- Give information about a file  
  pcntl_wifstopped(int status); int -- Give information about a file  
  pcntl_wstopsig(int status); int -- Give information about a file  
  pcntl_wtermsig(int status); int -- Give information about a file  
  preg_grep(string pattern, array input); array -- Searches array and returns entries which match regex  
  preg_match_all(string pattern, string subject, array matches [, int flags]); int -- Perform a Perl-style global regular expression match  
  preg_match(string pattern, string subject [, array matches [, int flags]]); int -- Perform a Perl-style regular expression match  
  preg_quote(string str [, string delimiter]); string -- Quote regular expression characters plus an optional character  
  preg_replace_callback(mixed pattern, mixed callback, mixed subject [, int limit]); mixed -- Perform Perl-style regular expression replacement using replacement callback.  
  preg_replace(mixed pattern, mixed replacement, mixed subject [, int limit]); mixed -- Perform Perl-style regular expression replacement.  
  preg_split(string pattern, string subject [, int limit [, int flags]]); array -- Split string into an array using a perl-style regular expression as a delimiter  
  pdf_add_bookmark(int pdf object, string text [, int parent [, int open]]); int -- Adds bookmark for current page  
  pdf_add_launchlink(int pdf object, float llx, float lly, float urx, float ury, string filename); int -- Read entire file into an array  
  pdf_add_locallink(int pdf object, float llx, float lly, float urx, float ury, int page, string dest); int -- Adds link to web resource  
  pdf_add_note(int pdf object, float llx, float lly, float urx, float ury, string contents, string title, string icon, int open); int -- Sets annotation  
  pdf_add_pdflink(int pdf object, float llx, float lly, float urx, float ury, string filename, int page, string dest); int -- Read entire file into an array  
  pdf_add_thumbnail(int pdf object, int image); int -- * Add an existing image as thumbnail for the current page.  
  pdf_add_weblink(int pdf object, float llx, float lly, float urx, float ury, string url); int -- Adds link to web resource  
  pdf_arc(resource pdf object, float x, float y, float r, float alpha, float beta); void -- Draws an arc  
  pdf_arc(resource pdf object, float x, float y, float r, float alpha, float beta); void -- Draws an arc  
  pdf_attach_file(int pdf object, float llx, float lly, float urx, float ury, string filename, string description, string author, string mimetype, string icon); int -- Read entire file into an array  
  pdf_begin_page(int pdf object, float width, float height); void -- Starts page  
  pdf_begin_pattern(int pdf object, float width, float height, float xstep, float ystep, int painttype); int -- * Start a new pattern definition.  
  pdf_begin_template(int pdf object, float width, float height); void -- * Start a new template definition.  
  pdf_circle(int pdf object, float x, float y, float r); void -- Draws a circle  
  pdf_clip(int pdf object); void -- Clips to current path  
  pdf_close_image(int pdf object, int image); void -- Closes the PDF image  
  pdf_close_pdi_page(int pdf object, int pagehandle); void -- * Close the page handle, and free all page-related resources.  
  pdf_close_pdi(int pdf object, int dochandle); void -- * Close all open page handles, and close the input PDF document.  
  pdf_close(int pdf object); void -- Closes the pdf document  
  pdf_closepath_fill_stroke(int pdf object); void -- Close, fill and stroke current path  
  pdf_closepath_stroke(int pdf object); void -- Close path and draw line along path  
  pdf_closepath(int pdf object); void -- Close path  
  pdf_concat(int pdf object, float a, float b, float c, float d, float e, float f); void -- Concatenates a matrix to the current transformation matrix for text and graphics  
  pdf_continue_text(int pdf object, string text); void -- Output text in next line  
  pdf_curveto(int pdf object, float x1, float y1, float x2, float y2, float x3, float y3); void -- Draws a curve  
  pdf_delete(int pdf object); void -- Deletes the PDF object  
  pdf_end_page(int pdf object); void -- Ends page  
  pdf_end_pattern(int pdf object); void -- * Finish the pattern definition.  
  pdf_end_template(int pdf object); void -- * Finish the template definition.  
  pdf_fill_stroke(int pdf object); void -- Fill and stroke current path  
  pdf_fill_stroke(int pdf object); void -- Fill and stroke current path  
  pdf_findfont(int pdf object, string fontname, string encoding, int embed); int -- Prepares the font fontname for later use with pdf_setfont()  
  pdf_get_buffer(int pdf object); string -- Fetches the full buffer containig the generated PDF data  
  pdf_get_image_height(int pdf object, int image); string -- Returns the height of an image  
  pdf_get_image_width(int pdf object, int image); string -- Returns the width of an image  
  pdf_get_majorversion(); int -- Returns the major version number of the PDFlib  
  pdf_get_majorversion(); int -- Returns the major version number of the PDFlib  
  pdf_get_parameter(int pdf object, string key [, float modifier]); string -- Return the key of the element currently pointed to by the internal array pointer  
  pdf_get_pdi_parameter(int pdf object, string key, int doc, int page, int index); string -- Return the key of the element currently pointed to by the internal array pointer  
  pdf_get_pdi_value(int pdf object, string key, int doc, int page, int index); string -- Return the key of the element currently pointed to by the internal array pointer  
  pdf_get_value(int pdf object, string key [, float modifier]); float -- Return the key of the element currently pointed to by the internal array pointer  
  pdf_initgraphics(int pdf object); void -- * Reset all implicit color and graphics state parameters to their defaults.  
  pdf_lineto(int pdf object, float x, float y); void -- Draws a line  
  pdf_makespotcolor(int pdf object, string spotname); void -- * Make a named spot color from the current color.  
  pdf_moveto(int pdf object, float x, float y); void -- Sets current point  
  pdf_new(); int -- Creates a new PDF object  
  pdf_open_CCITT(int pdf object, string filename, int width, int height, int BitReverse, int k, int Blackls1); int -- Read entire file into an array  
  pdf_open_file(int pdf object [, string filename]); int -- Read entire file into an array  
  pdf_open_image_file(int PDF-document, string imagetype, string filename [, string stringparam [, string intparam]]); int -- Read entire file into an array  
  pdf_open_image(int PDF-document, string imagetype, string source, string data, long length, int width, int height, int components, int bpc, string params); int -- Opens an image of the given type and returns an image for placement in a PDF document  
  pdf_open_memory_image(int pdf object, int image); int -- Takes an GD image and returns an image for placement in a PDF document  
  pdf_open_pdi_page(int pdf object, int dochandle, int pagenumber, string pagelabel); int -- * Prepare a page for later use with PDF_place_image().  
  pdf_open_pdi(int pdf object, string filename, string stringparam, int intparam); int -- Read entire file into an array  
  pdf_open_tiff(int PDF-document, string filename); int -- Read entire file into an array  
  pdf_place_image(int pdf object, int image, float x, float y, float scale); void -- Places image in the PDF document  
  pdf_place_pdi_page(int pdf object, int page, float x, float y, float sx, float sy); void -- * Place a PDF page with the lower left corner at (x, y), and scale it.  
  pdf_rect(int pdf object, float x, float y, float width, float height); void -- Draws a rectangle  
  pdf_restore(int pdf object); void -- Restores formerly saved enviroment  
  pdf_rotate(int pdf object, float phi); void -- Sets rotation  
  pdf_save(int pdf object); void -- Saves current enviroment  
  pdf_scale(int pdf object, float x-scale, float y-scale); void -- Sets scaling  
  pdf_set_border_color(int pdf object, float red, float green, float blue); void -- Sets color of box surounded all kinds of annotations and links  
  pdf_set_border_dash(int pdf object, float black, float white); void -- Sets the border dash style of all kinds of annotations and links  
  pdf_set_border_style(int pdf object, string style, float width); void -- Sets style of box surounding all kinds of annotations and link  
  pdf_set_horiz_scaling(int pdf object, float scale); void -- Sets horizontal scaling of text  
  pdf_set_info_author(int pdfdoc, string author); bool -- Fills the author field of the document  
  pdf_set_info_creator(int pdfdoc, string creator); bool -- Fills the creator field of the document  
  pdf_set_info_keywords(int pdfdoc, string keywords); bool -- Return the key of the element currently pointed to by the internal array pointer  
  pdf_set_info_subject(int pdfdoc, string subject); bool -- Fills the subject field of the document  
  pdf_set_info_title(int pdfdoc, string title); bool -- Fills the title field of the document  
  pdf_set_info(int pdf object, string key, string value); void -- Return the key of the element currently pointed to by the internal array pointer  
  pdf_set_parameter(int pdf object, string key, string value); void -- Return the key of the element currently pointed to by the internal array pointer  
  pdf_set_text_pos(int pdf object, float x, float y); void -- Sets the position of text for the next pdf_show call  
  pdf_set_value(int pdf object, string key, float value); void -- Return the key of the element currently pointed to by the internal array pointer  
  pdf_setcolor(int pdf object, string type, string colorspace, float c1 [, float c2 [, float c3 [, float c4]]]); void -- * Set the current color space and color.  
  pdf_setdash(int pdf object, float b, float w); void -- Sets dash pattern  
  pdf_setflat(int pdf object, float flatness); void -- Sets flatness  
  pdf_setfont(int pdf object, int font, float size); void -- Sets the current font in the fiven fontsize  
  pdf_setgray_fill(int pdf object, float gray); void -- Sets filling color to gray value  
  pdf_setgray_stroke(int pdf object, float gray); void -- Sets drawing color to gray value  
  pdf_setgray(int pdf object, float gray); void -- Sets drawing and filling color to gray value  
  pdf_setlinecap(int pdf object, int linecap); void -- Sets linecap parameter  
  pdf_setlinejoin(int pdf object, long linejoin); void -- Sets linejoin parameter  
  pdf_setlinewidth(int pdf object, float width); void -- Sets line width  
  pdf_setmatrix(int pdf object, float a, float b, float c, float d, float e, float f); void -- Explicitly set the current transformation matrix.  
  pdf_setmiterlimit(int pdf object, float miter); void -- Sets miter limit  
  pdf_setpolydash(int pdf object, float * dasharray); void -- Sets more complicated dash pattern  
  pdf_setrgbcolor_fill(int pdf object, float red value, float green value, float blue value); void -- Sets filling color to RGB color value  
  pdf_setrgbcolor_stroke(int pdf object, float red value, float green value, float blue value); void -- Sets drawing color to RGB color value  
  pdf_setrgbcolor(int pdf object, float red value, float green value, float blue value); void -- Sets drawing and filling color to RGB color value  
  pdf_show_boxed(int pdf object, string text, float left, float top, float width, float height, string hmode [, string feature]); int -- Output text formated in a boxed  
  pdf_show_xy(int pdf object, string text, float x, float y); void -- Output text at position  
  pdf_show(int pdf object, string text); void -- Output text at current position  
  pdf_skew(int pdf object, float alpha, float beta); void -- Skew the coordinate system  
  pdf_stringwidth(int pdf object, string text [, int font [, float size]]); float -- Returns width of text in current font  
  pdf_stroke(int pdf object); void -- Draw line along path path  
  pdf_translate(int pdf object, float tx, float ty); void -- Sets origin of coordinate system  
  pfpro_cleanup(); void -- Shuts down the Payflow Pro library  
  pfpro_init(); void -- Initializes the Payflow Pro library  
  pfpro_process_raw(string parameters [, string address [, int port [, int timeout [, string proxy address [, int proxy port [, string proxy logon [, string proxy password]]]]]]]); string -- Returns the natural logarithm of the number, or the base log if base is specified  
  pfpro_process(array parameters [, string address [, int port [, int timeout [, string proxy address [, int proxy port [, string proxy logon [, string proxy password]]]]]]]); array -- Returns the natural logarithm of the number, or the base log if base is specified  
  pfpro_version(); string -- Returns the version of the Payflow Pro library  
  pg_affected_rows(resource result); int -- Returns the number of affected tuples  
  pg_cancel_query(resource connection); bool -- Cancel request  
  pg_client_encoding([resource connection]); string -- Get the current client encoding  
  pg_close(resource connection); bool -- Close a PostgreSQL connection  
  pg_connect(string connection_string); resource -- Open a PostgreSQL connection  
  pg_connection_busy(resource connection); bool -- Get connection is busy or not  
  pg_connection_reset(resource connection); bool -- Reset connection (reconnect)  
  pg_connection_status(resource connection); int -- Get connection status  
  pg_convert(resource connection, string table_name, array assoc_array [, int options]); array -- Check and convert values for PostgreSQL SQL statement  
  pg_copy_from(resource connection, string table_name, array rows [, string delimiter [, string null_as]]); bool -- Copy table from array  
  pg_copy_to(resource connection, string table_name [, string delimiter [, string null_as]]); array -- Copy table to array  
  pg_dbname(resource connection); string -- Get the database name  
  pg_delete(resource connection, string table_name, array assoc_array [, int options]); long -- Delete records has ids (id=>value)  
  pg_end_copy([resource connection]); bool -- Sync with backend. Completes the Copy command  
  pg_escape_bytea(string data); string -- Escape binary for bytea type   
  pg_escape_string(string data); string -- Escape string for text/char type  
  pg_fetch_all(resource result [, int row]); array -- Fetch all rows into array  
  pg_fetch_array(resource result [, int row [, int result_type]]); array -- Fetch a row as an array  
  pg_fetch_assoc(resource result [, int row]); array -- Fetch a row as an assoc array  
  pg_fetch_object(resource result [, int row [, int result_type]]); object -- Fetch a row as an object  
  pg_fetch_result(resource result, int row, mixed field); mixed -- Returns values from a result identifier  
  pg_fetch_row(resource result, int row); array -- Get a row as an enumerated array  
  pg_field_is_null(resource result, int row, mixed field); int -- Test if a field is NULL  
  pg_field_name(resource result, int field_number); string -- Returns the name of the field  
  pg_field_num(resource result, string field_name); int -- Returns the field number of the named field  
  pg_field_prtlen(resource result, int row_number, string field_name); int -- Returns the printed length  
  pg_field_size(resource result, int field_number); int -- Returns the internal size of the field  
  pg_field_type(resource result, int field_number); string -- Returns the type name for the given field  
  pg_free_result(resource result); bool -- Free result memory  
  pg_get_result([resource connection]); resource -- Get asynchronous query result  
  pg_host(resource connection); string -- Returns the host name associated with the connection  
  pg_insert(resource connection, string table_name, array assoc_array [, int options]); bool -- Insert values (filed=>value) to table  
  pg_last_error([resource connection]); string -- Get the error message string  
  pg_last_notice(resource connection); string -- Returns the last notice set by the backend  
  pg_last_oid(resource result); int -- Returns the last object identifier  
  pg_lo_close(resource large_object); bool -- Close a large object  
  pg_lo_create(resource connection); int -- Create a large object  
  pg_lo_export(int oid, string pathname [, resource connection]); bool -- Export large object direct to filesystem  
  pg_lo_import([resource connection, string pathname]); int -- Import large object direct from filesystem  
  pg_lo_open(resource connection, int oid, string mode); resource -- Open a large object and return fd  
  pg_lo_read_all(resource large_object); int -- Read a large object and send straight to browser  
  pg_lo_read(resource large_object, int len); string -- Read a large object  
  pg_lo_seek(resource large_object, int offset [, int whence]); bool -- Seeks position of large object  
  pg_lo_tell(resource large_object); int -- Returns current position of large object  
  pg_lo_unlink(resource connection, int oid); bool -- Delete a large object  
  pg_lo_write(resource large_object, string data); int -- Write a large object  
  pg_meta_data(resource connection, string table_name); array -- Get meta_data  
  pg_num_fields(resource result); int -- Return the number of fields in the result  
  pg_num_rows(resource result); int -- Return the number of rows in the result  
  pg_options(resource connection); string -- Get the options associated with the connection  
  pg_pconnect(string connection_string); resource -- Open a persistent PostgreSQL connection  
  pg_ping(resource connection); array -- Ping database. If connection is bad, try to reconnect.  
  pg_port(resource connection); int -- Return the port number associated with the connection  
  pg_put_line([resource connection, string data]); bool -- Send null-terminated string to backend server 
  pg_query(resource connection, string query); resource -- Execute a query  
  pg_result_error(resource result); string -- Get error message associated with result  
  pg_result_seek(resource result, int offset); array -- Set internal row offset  
  pg_result_status(resource result); int -- Get status of query result  
  pg_select(resource connection, string table_name, array assoc_array [, int options]); array -- Select records that has ids (id=>value)  
  pg_send_query(resource connection, string query); bool -- Send asynchronous query  
  pg_set_client_encoding([resource connection, string encoding]); int -- Set client encoding  
  pg_trace(string pathname [, string mode [, resource connection]]); bool -- Enable tracing a PostgreSQL connection  
  pg_tty(resource connection); string -- Return the tty name associated with the connection  
  pg_unescape_bytea(string data); string -- Unescape binary for bytea type   
  pg_untrace([resource connection]); bool -- Disable tracing of a PostgreSQL connection  
  pg_update(resource connection, string table_name, array condition, array data [, int options]); long -- Update table using values (field=>value) and ids (id=>value)  
  posix_ctermid(); string -- Generate terminal path name (POSIX.1, 4.7.1)  
  posix_getcwd(); string -- Get working directory pathname (POSIX.1, 5.2.2)  
  posix_getegid(); int -- Get the current effective group id (POSIX.1, 4.2.1)  
  posix_geteuid(); int -- Get the current effective user id (POSIX.1, 4.2.1)  
  posix_getgid(); int -- Get the current group id (POSIX.1, 4.2.1)  
  posix_getgrgid(int gid); array -- Group database access (POSIX.1, 9.2.1)  
  posix_getgrnam(string name); array -- Group database access (POSIX.1, 9.2.1)  
  posix_getgroups(); array -- Get supplementary group id's (POSIX.1, 4.2.3)  
  posix_getlogin(); string -- Get user name (POSIX.1, 4.2.4)  
  posix_getpgid(int pid); int -- Returns an approximation of pi  
  posix_getpgrp(); int -- Get current process group id (POSIX.1, 4.3.1)  
  posix_getpid(); int -- Get the current process id (POSIX.1, 4.1.1)  
  posix_getppid(); int -- Get the parent process id (POSIX.1, 4.1.1)  
  posix_getpwnam(string username); array -- User database access (POSIX.1, 9.2.2)  
  posix_getpwuid(int uid); array -- User database access (POSIX.1, 9.2.2)  
  posix_getrlimit(); array -- Get system resource consumption limits (This is not a POSIX function, but a BSDism and a SVR4ism. We compile conditionally)  
  posix_getsid(int pid); int -- Returns an approximation of pi  
  posix_getuid(); int -- Get the current user id (POSIX.1, 4.2.1)  
  posix_isatty(int fd); bool -- Determine if filedesc is a tty (POSIX.1, 4.7.1)  
  posix_kill(int pid, int sig); bool -- Returns an approximation of pi  
  posix_mkfifo(string pathname, int mode); bool -- Make a FIFO special file (POSIX.1, 5.4.2)  
  posix_setegid(int gid); bool -- Set effective group id  
  posix_seteuid(int uid); bool -- Set effective user id  
  posix_setgid(int gid); bool -- Set group id (POSIX.1, 4.2.2)  
  posix_setpgid(int pid, int pgid); int -- Returns an approximation of pi  
  posix_setsid(); int -- Create session and set process group id (POSIX.1, 4.3.2)  
  posix_setuid(int uid); bool -- Set user id (POSIX.1, 4.2.2)  
  posix_times(); array -- Get process times (POSIX.1, 4.5.2)  
  posix_ttyname(int fd); string -- Determine terminal device name (POSIX.1, 4.7.2)  
  posix_uname(); array -- Get system name (POSIX.1, 4.4.1)  
  printer_abort(resource handle); void
  printer_close(resource handle); void
  printer_create_brush(int style, string color); mixed
  printer_create_dc(resource handle); void
  printer_create_font(string face, int height, int width, int font_weight, bool italic, bool underline, bool strikeout, int orientaton); mixed
  printer_create_pen(int style, int width, string color); mixed
  printer_delete_brush(resource handle); bool
  printer_delete_dc(resource handle); bool
  printer_delete_font(resource handle); bool
  printer_delete_pen(resource handle); bool
  printer_draw_bmp(resource handle, string filename, int x, int y); void -- Read entire file into an array  
  printer_draw_chord(resource handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad_x, int rad_y, int rad_x1, int rad_y1); void
  printer_draw_elipse(resource handle, int ul_x, int ul_y, int lr_x, int lr_y); void
  printer_draw_line(resource printer_handle, int from_x, int from_y, int to_x, int to_y); void
  printer_draw_pie(resource handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad1_x, int rad1_y, int rad2_x, int rad2_y); void
  printer_draw_rectangle(resource handle, int ul_x, int ul_y, int lr_x, int lr_y); void
  printer_draw_roundrect(resource handle, int ul_x, int ul_y, int lr_x, int lr_y, int width, int height); void
  printer_draw_text(resource printer_handle, string text, int x, int y); void
  printer_end_doc(resource handle); bool
  printer_end_page(resource handle); bool
  printer_get_option(resource handle, string option); mixed
  printer_list(int enumtype [, string name [, int level]]); array
  printer_logical_fontheight(resource handle, int height); int
  printer_open([string devicename]); mixed
  printer_select_brush(resource printer_handle, resource brush_handle); void
  printer_select_font(resource printer_handle, resource font_handle); void
  printer_select_pen(resource printer_handle, resource pen_handle); void
  printer_set_option(resource handle, int option, mixed value); bool
  printer_start_doc(resource handle [, string document]); bool
  printer_start_page(resource handle); bool
  printer_write(resource handle, string content); bool
  pspell_add_to_personal(int dictionary_link, string word); int -- Adds a word to a personal list  
  pspell_add_to_session(int dictionary_link, string word); int -- Adds a word to the current session  
  pspell_check(int dictionary_link, string word); bool -- Returns true if word is valid  
  pspell_clear_session(int dictionary_link); int -- Clears the current session  
  pspell_config_create(string language [, string spelling [, string jargon [, string encoding]]]); int -- Create a new config to be used later to create a manager  
  pspell_config_ignore(int dictionary_link, int n); int -- Ignore words <= n chars  
  pspell_config_mode(int dictionary_link, int mode); int -- Select mode for config (PSPELL_FAST, PSPELL_NORMAL or PSPELL_BAD_SPELLERS)  
  pspell_config_personal(int dictionary_link, string file); int -- Read entire file into an array  
  pspell_config_repl(int dictionary_link, string file); int -- Read entire file into an array  
  pspell_config_runtogether(int dictionary_link, bool flag); int -- Consider run-together words as valid components  
  pspell_config_save_repl(int dictionary_link, bool flag); int -- Save replacement pairs when personal list is saved for this config  
  pspell_new_config(int config); int -- Load a dictionary based on the given config  
  pspell_new_personal(string personal, string language [, string spelling [, string jargon [, string encoding [, int mode]]]]); int -- Load a dictionary with a personal wordlist 
  pspell_new(string language [, string spelling [, string jargon [, string encoding [, int mode]]]]); int -- Load a dictionary  
  pspell_save_wordlist(int dictionary_link); int -- Saves the current (personal) wordlist  
  pspell_store_replacement(int dictionary_link, string misspelled, string correct); int -- Notify the dictionary of a user-selected replacement  
  pspell_suggest(int dictionary_link, string word); array -- Returns array of suggestions  
  qdom_error(); string -- Returns the error string from the last QDOM operation or FALSE if no errors occured. 
  qdom_tree(string); object -- creates a tree of an xml string  
  readline_add_history(string line); void -- Adds a line to the history  
  readline_clear_history(); bool -- Clears the history  
  readline_completion_function(string line); bool -- Readline completion function?  
  readline_info([string varname [, string newvalue]]); mixed -- Gets/sets various internal readline variables.  
  readline_list_history(); array -- Lists the history  
  readline_read_history(string filename); bool -- Read entire file into an array  
  readline_write_history(string filename); bool -- Read entire file into an array  
  readline([string prompt]); string -- Reads a line  
  recode_file(string request, resource input, resource output); bool -- Recode file input into file output according to request  
  recode_string(string request, string string); string -- Recode string str according to request string  
  recode(string request, string string); string
  ereg_replace(string pattern, string replacement, string string); string -- Replace regular expression  
  ereg(string pattern, string string [, array regs]); int -- Regular expression match  
  eregi_replace(string pattern, string replacement, string string); string -- Case insensitive replace regular expression  
  eregi(string pattern, string string [, array regs]); int -- Case-insensitive regular expression match  
  split(string pattern, string string [, int limit]); array -- Split string into array by regular expression  
  spliti(string pattern, string string [, int limit]); array -- Split string into array by regular expression case-insensitive  
  sql_regcase(string string); string -- Make regular expression for case insensitive match  
  ftok(string pathname, string proj); int -- Convert a pathname and a project identifier to a System V IPC key  
  msg_get_queue(int key [, int perms]); int -- Attach to a message queue  
  msg_receive(int queue, int desiredmsgtype, int msgtype, int maxsize, mixed message [, bool unserialize [, int flags [, int errorcode]]]); bool -- Send a message of type msgtype (must be > 0) to a message queue  
  msg_remove_queue(int queue); bool -- Destroy the queue  
  msg_send(int queue, int msgtype, mixed message [, bool serialize [, bool blocking [, int errorcode]]]); bool -- Send a message of type msgtype (must be > 0) to a message queue  
  msg_set_queue(int queue, array data); bool -- Set information for a message queue  
  msg_stat_queue(int queue); array -- Returns information about a message queue  
  sem_acquire(int sem_identifier); bool -- Acquires the semaphore with the given id, blocking if necessary  
  sem_get(int key [, int max_acquire [, int perm]]); int -- Return an id for the semaphore with the given key, and allow max_acquire (default 1) processes to acquire it simultaneously  
  sem_release(int sem_identifier); bool -- Releases the semaphore with the given id  
  sem_remove(int sem_identifier); bool -- Removes semaphore from Unix systems  
  shm_attach(int key [, int memsize [, int perm]]); int -- Creates or open a shared memory segment  
  shm_detach(int shm_identifier); int -- Disconnects from shared memory segment  
  shm_get_var(int id, int variable_key); mixed -- Returns a variable from shared memory  
  shm_put_var(int shm_identifier, int variable_key, mixed variable); int -- Inserts or updates a variable in shared memory  
  shm_remove_var(int id, int variable_key); int -- Removes variable from shared memory  
  shm_remove(int shm_identifier); int -- Removes shared memory from Unix systems  
  sesam_affected_rows(string result_id); int
  sesam_commit(); bool
  sesam_connect(string catalog, string schema, string user); bool
  sesam_diagnostic(); array
  sesam_disconnect(); bool
  sesam_errormsg(); string
  sesam_execimm(string query); string
  sesam_fetch_array(string result_id [, int whence [, int offset]]); array
  sesam_fetch_result(string result_id [, int max_rows]); mixed -- Return the highest value in an array or a series of arguments  
  sesam_fetch_row(string result_id [, int whence [, int offset]]); array
  sesam_field_array(string result_id); array
  sesam_field_name(string result_id, int index); int
  sesam_free_result(string result_id); int
  sesam_num_fields(string result_id); int
  sesam_query(string query [, bool scrollable]); string
  sesam_rollback(); bool
  sesam_seek_row(string result_id, int whence [, int offset]); bool
  sesam_settransaction(int isolation_level, int read_only); bool
  session_cache_expire([int new_cache_expire]); int -- Return the current cache expire. If new_cache_expire is given, the current cache_expire is replaced with new_cache_expire  
  session_cache_limiter([string cache_limiter]); string -- Return the current cache limiter. If new_cache_limited is given, the current cache_limiter is replaced with new_cache_limiter  
  session_decode(string data); bool -- Deserializes data and reinitializes the variables  
  session_destroy(); bool -- Destroy the current session and all data associated with it  
  session_encode(); string -- Serializes the current setup and returns the serialized representation  
  session_get_cookie_params(); array -- Return the session cookie parameters  
  session_id([string id]); string -- Return the current session id. If newid is given, the session id is replaced with newid  
  session_is_registered(string name); bool -- Checks if a variable is registered in session  
  session_module_name([string module]); string -- Return the current module name used for accessing session data. If newname is given, the module name is replaced with newname  
  session_name([string name]); string -- Return the current session name. If newname is given, the session name is replaced with newname  
  session_readonly(); void
  session_register(mixed name [, mixed ...]); bool -- Adds varname(s) to the list of variables which are freezed at the session end  
  session_save_path([string path]); string -- Return the current save path passed to module_name. If newname is given, the save path is replaced with newname  
  session_set_cookie_params(int lifetime [, string path [, string domain [, bool secure]]]); void -- Set session cookie parameters  
  session_set_save_handler(string open, string close, string read, string write, string destroy, string gc); bool -- Sets user-level functions  
  session_start(); bool -- Begin session - reinitializes freezed variables, registers browsers etc  
  session_unregister(string name); bool -- Removes varname from the list of variables which are freezed at the session end  
  session_unset(); void -- Unset all registered variables  
  session_write_close(); void -- Write session data and end session  
  shmop_close(int shmid); int
  shmop_delete(int shmid); int
  shmop_open(int key, string flags, int mode, int size); int -- Return the key of the element currently pointed to by the internal array pointer  
  shmop_read(int shmid, int start, int count); string -- Count the number of elements in a variable (usually an array)  
  shmop_size(int shmid); int
  shmop_write(int shmid, string data, int offset); int
  snmp_get_quick_print(); bool -- Return the current status of quick_print  
  snmp_set_quick_print(bool quick_print); void -- Return all objects including their respective object id withing the specified one  
  snmpget(string hostname, string community, string object_id [, int timeout [, int retries]]); string -- Return current UNIX timestamp  
  snmprealwalk(string host, string community, string object_id [, int timeout [, int retries]]); array -- Return current UNIX timestamp  
  snmpset(string hostname, string community, string object_id, string type, mixed value [, int timeout [, int retries]]); bool -- Return current UNIX timestamp  
  snmpwalk(string hostname, string community, string object_id [, int timeout [, int retries]]); array -- Return current UNIX timestamp  
  snmpwalkoid(string hostname, string community, string object_id [, int timeout [, int retries]]); array -- Return current UNIX timestamp  
  socket_accept(resource socket); resource -- Accepts a connection on the listening socket fd  
  socket_bind(resource socket, string address [, int port]); bool -- Binds an open socket to a listening port, port is only specified in AF_INET family.  
  socket_clear_error([resource socket]); void -- Clears the error on the socket or the last error code.  
  socket_close(resource socket); void -- Closes a file descriptor  
  socket_connect(resource socket, string address [, int port]); bool -- Opens a connection to addr;port on the socket specified by socket  
  socket_create_listen(int port [, int backlog]); resource -- Opens a socket on port to accept connections  
  socket_create_pair(int domain, int type, int protocol, array &fd); bool -- Creates a pair of indistinguishable sockets and stores them in fds.  
  socket_create(int domain, int type, int protocol); resource -- Creates an endpoint for communication in the domain specified by domain, of type specified by type  
  socket_get_option(resource socket, int level, int optname); mixed -- Gets socket options for the socket  
  socket_getpeername(resource socket, string &addr [, int &port]); bool -- Queries the remote side of the given socket which may either result in host/port or in a UNIX filesystem path, dependent on its type.  
  socket_getsockname(resource socket, string &addr [, int &port]); bool -- Queries the remote side of the given socket which may either result in host/port or in a UNIX filesystem path, dependent on its type.  
  socket_iovec_add(resource iovec, int iov_len); bool -- Adds a new vector to the scatter/gather array  
  socket_iovec_alloc(int num_vectors [, int]); resource -- Builds a 'struct iovec' for use with sendmsg, recvmsg, writev, and readv  
  socket_iovec_delete(resource iovec, int iov_pos); bool -- Deletes a vector from an array of vectors  
  socket_iovec_fetch(resource iovec, int iovec_position); string -- Returns the data held in the iovec specified by iovec_id[iovec_position]  
  socket_iovec_free(resource iovec); bool -- Frees the iovec specified by iovec_id  
  socket_iovec_set(resource iovec, int iovec_position, string new_val); bool -- Sets the data held in iovec_id[iovec_position] to new_val  
  socket_last_error([resource socket]); int -- Returns the last socket error (either the last used or the provided socket resource)  
  socket_listen(resource socket [, int backlog]); bool -- Sets the maximum number of connections allowed to be waited for on the socket specified by fd  
  socket_read(resource socket, int length [, int type]); string -- Reads a maximum of length bytes from socket  
  socket_readv(resource socket, resource iovec_id); bool -- Reads from an fd, using the scatter-gather array defined by iovec_id  
  socket_recv(resource socket, int len, int flags); string -- Receives data from a connected socket  
  socket_recvfrom(resource socket, string &buf, int len, int flags, string &name [, int &port]); int -- Receives data from a socket, connected or not  
  socket_recvmsg(resource socket, resource iovec, array &control, int &controllen, int &flags, string &addr [, int &port]); bool -- Used to receive messages on a socket, whether connection-oriented or not  
  socket_select(resource &read, resource &write, resource &except, int tv_sec [, int tv_usec]); int -- Runs the select() system call on the sets mentioned with a timeout specified by tv_sec and tv_usec  
  socket_send(resource socket, string buf, int len, int flags); int -- Sends data to a connected socket  
  socket_sendmsg(resource socket, resource iovec, int flags, string addr [, int port]); bool -- Sends a message to a socket, regardless of whether it is connection-oriented or not  
  socket_sendto(resource socket, string buf, int len, int flags, string addr [, int port]); int -- Sends a message to a socket, whether it is connected or not  
  socket_set_nonblock(resource socket); bool -- Sets nonblocking mode on a socket resource  
  socket_set_option(resource socket, int level, int optname, int); bool -- Sets socket options for the socket  
  socket_shutdown(resource socket [, int how]); bool -- Shuts down a socket for receiving, sending, or both.  
  socket_strerror(int errno); string -- Returns a string describing an error  
  socket_write(resource socket, string buffer [, int length]); int -- Writes the buffer to the socket resource, length is optional  
  socket_writev(resource socket, resource iovec_id); bool -- Writes to a file descriptor, fd, using the scatter-gather array defined by iovec_id  
  addcslashes(string str, string charlist); string -- Escapes all chars mentioned in charlist with backslash. It creates octal representations if asked to backslash characters with 8th bit set or with ASCII<32 (except '\n', '\r', '\t' etc...)  
  addslashes(string str); string -- Escapes single quote, double quotes and backslash characters in a string with backslashes  
  bin2hex(string str); string -- Converts the binary representation of data to hex  
  chr(int ascii); string -- Converts ASCII code to a character  
  chunk_split(string body [, int chunklen [, string end]]); string -- Returns split line  
  convert_cyr_string(string str, string from, string to); string -- Convert from one Cyrillic character set to another  
  count_chars(string string [, int mode]); mixed -- Returns info about what characters are used in input  
  crc32(string str); int -- Calculate the crc32 polynomial of a string  
  crypt(string str [, string salt]); string -- Encrypt a string  
  echo(string arg1 [, string argn...])
  explode(string separator, string string [, int limit]); array -- Splits a string on string separator and return array of components  
  get_html_translation_table(int table [, int quote_style]); string -- Returns the internal translation table used by htmlspecialchars and htmlentities  
  get_meta_tags(string filename [, int use_include_path]); array -- Extracts all meta tag content attributes from a file and returns an array  
  hebrev(string hebrew_text [, int max_chars_per_line]); string -- Converts logical Hebrew text to visual text  
  hebrevc(string hebrew_text [, int max_chars_per_line]); string -- Converts logical Hebrew text to visual text with newline conversion  
  htmlentities(string string [, int quote_style [, string charset]]); string -- Convert all applicable characters to HTML entities  
  htmlspecialchars(string string [, int quote_style [, string charset]]); string -- Convert special characters to HTML entities  
  implode(string glue, array pieces); string -- Joins array elements placing glue string between items and return one string  
  join(string glue, array pieces); string -- An alias for implode  
  levenshtein(string str1, string str2); int -- Calculate Levenshtein distance between two strings  
  localeconv(); array -- Returns numeric formatting information based on the current locale  
  ltrim(string str [, string charlist]); string -- Strips whitespace from the beginning of a string  
  md5_file(string filename); string -- Calculate the md5 hash of given filename  
  md5(string str); string -- Calculate the md5 hash of a string  
  metaphone(string str); string -- Break english phrases down into their phonemes  
  nl_langinfo(int item); string -- Query language and locale information  
  nl2br(string string); string -- Converts newlines to HTML line breaks  
  number_format(float number [, int decimals [, string dec_point [, string thousands_sep]]]); string -- Formats a number with grouped thousands  
  ord(string string); int -- Returns ASCII value of character  
  parse_str(string str [, array arr]); void -- Parses GET/POST/COOKIE data and sets global variables  
  print(string arg)
  printf(string format [, mixed args]); void -- Output a formatted string  
  quoted_printable_decode(string str); string -- Convert a quoted-printable string to an 8 bit string  
  quotemeta(string str); string -- Quotes meta characters  
  rtrim(string str [, string charlist]); string -- Removes trailing whitespace  
  setlocale(mixed category, string locale [, string ...]); string -- Set locale information  
  similar_text(string first, string second [, float percent]); int -- Calculates the similarity between two strings  
  soundex(string str); string -- Calculate the soundex key of a string  
  sprintf(string format [, mixed args]); string -- Return a formatted string  
  sscanf(string str, string format [, string var1]); mixed -- Implements an ANSI C compatible sscanf  
  str_pad(string input, int pad_length [, string pad_string [, int pad_type]]); string -- Returns input string padded on the left or right to specified length with pad_string  
  str_repeat(string input, int multiplier); string -- Returns the input string repeat mult times  
  str_replace(mixed search, mixed replace, mixed subject); mixed -- Replaces all occurrences of search in haystack with replace  
  str_rot13(string str); string -- Perform the rot13 transform on a string  
  strcasecmp(string str1, string str2); int -- Binary safe case-insensitive string comparison  
  strchr(string haystack, string needle); string -- An alias for strstr  
  strcmp(string str1, string str2); int -- Binary safe string comparison  
  strcoll(string str1, string str2); int -- Compares two strings using the current locale  
  strcspn(string str1, string str2); int -- Finds length of initial segment consisting entirely of characters not found in mask. If start or/and length is provide works like strcspn(substr($s,$start,$len),$bad_chars)  
  strip_tags(string str [, string allowable_tags]); string -- Strips HTML and PHP tags from a string  
  stripcslashes(string str); string -- Strips backslashes from a string. Uses C-style conventions  
  stripslashes(string str); string -- Strips backslashes from a string  
  stristr(string haystack, string needle); string -- Finds first occurrence of a string within another, case insensitive  
  strlen(string str); int -- Get string length  
  strnatcasecmp(string str1, string str2); int -- Returns the result of case-insensitive string comparison using 'natural' algorithm  
  strnatcmp(string str1, string str2); int -- Returns the result of string comparison using 'natural' algorithm  
  strncasecmp(string str1, string str2, int len); int -- Binary safe string comparison  
  strncmp(string str1, string str2, int len); int -- Binary safe string comparison  
  strpos(string haystack, string needle [, int offset]); int -- Finds position of first occurrence of a string within another  
  strrchr(string haystack, string needle); string -- Finds the last occurrence of a character in a string within another  
  strrev(string string); string -- Reverse a string  
  strrpos(string haystack, char needle); int -- Finds position of last occurrence of a character in a string within another  
  strspn(string str1, string str2); int -- Finds length of initial segment consisting entirely of characters found in mask. If start or/and length is provided works like strspn(substr($s,$start,$len),$good_chars)  
  strstr(string haystack, string needle); string -- Finds first occurrence of a string within another  
  strtok(string arg1, string arg2); string -- Tokenize a string  
  strtolower(string str); string -- Makes a string lowercase  
  strtoupper(string string); string -- Makes a string uppercase  
  strtr(string str, string from, string to); string -- Translates characters in str using given translation tables  
  substr_count(string haystack, string needle); int -- Returns the number of times a substring occurs in the string  
  substr_replace(string string, string replacement, int start [, int length]); string -- Replaces part of a string with another string  
  substr(string string, int start [, int length]); string -- Returns part of a string  
  trim(string str [, string charlist]); string -- Strips whitespace from the beginning and end of a string  
  ucfirst(string str); string -- Makes a string's first character uppercase  
  ucwords(string str); string -- Uppercase the first character of every word in a string  
  vprintf(string format, array args); void -- Output a formatted string  
  vsprintf(string format, array args); string -- Return a formatted string  
  wordwrap(string str [, int width [, string break [, int cut]]]); string -- Wraps buffer to selected number of characters using string break char  
  swf_actiongeturl(string url, string target); void -- Gets the specified url  
  swf_actiongotoframe(int framenumber); void -- Causes the Flash movie to display the specified frame, frame_number, and then stop.  
  swf_actiongotolabel(string label); void -- Causes the flash movie to display the frame with the given label and then stop  
  swf_actionnextframe(); void -- Goes foward one frame  
  swf_actionplay(); void -- Starts playing the Flash movie from the current frame  
  swf_actionprevframe(); void -- Goes backward one frame  
  swf_actionsettarget(string target); void -- Sets the context for actions  
  swf_actionstop(); void -- Stops playing the Flash movie at the current frame  
  swf_actiontogglequality(); void -- Toggles between high and low quality  
  swf_actionwaitforframe(int framenumber, int skipcount); void -- If the specified frame has not been loaded, skip the specified number of actions in the action list  
  swf_addbuttonrecord(int states, int shapeid, int depth); void -- Controls the location, appearance and active area of the current button  
  swf_addcolor(float r, float g, float b, float a); void -- Set the global add color to the rgba value specified  
  swf_closefile([int return_file]); void -- Close a Shockwave flash file that was opened with swf_openfile  
  swf_definebitmap(int objid, string image_name); void -- Defines a bitmap given the name of a .gif .rgb .jpeg or .fi image. The image will be converted into Flash jpeg or Flash color map format  
  swf_definefont(int fontid, string fontname); void -- Defines a font. name specifies the PostScript name of the font to use. This font also becomes the current font.   
  swf_defineline(int objid, float x1, float y1, float x2, float y2, float width); void -- Create a line with object id, objid, starting from x1, y1 and going to x2, y2 with width, width  
  swf_definepoly(int objid, array coords, int npoints, float width); void -- Define a Polygon from an array of x,y coordinates, coords.  
  swf_definerect(int objid, float x1, float y1, float x2, float y2, float width); void -- Create a rectangle with object id, objid, the upper lefthand coordinate is given by x1, y1 the bottom right coordinate is x2, y2 and with is the width of the line  
  swf_definetext(int objid, string str, int docenter); void -- defines a text string using the current font, current fontsize and current font slant. If docCenter is 1, the word is centered in x  
  swf_endbutton(); void -- Complete the definition of the current button  
  swf_enddoaction(); void -- Ends the list of actions to perform for the current frame  
  swf_endshape(); void -- Completes the definition of the current shape  
  swf_endsymbol(); void -- End the current symbol  
  swf_fontsize(float size); void -- Sets the current font's height to the value specified by height  
  swf_fontslant(float slant); void -- Set the current font slant to the angle indicated by slant  
  swf_fonttracking(float tracking); void -- Sets the current font tracking to the specified value, track  
  swf_getbitmapinfo(int bitmapid); array -- Returns an array of information about a bitmap specified by bitmapid  
  swf_getfontinfo(); array -- Get information about the current font  
  swf_getframe(); int -- Returns the current frame  
  swf_labelframe(string name); void -- Adds string name to the current frame  
  swf_lookat(float view_x, float view_y, float view_z, float reference_x, float reference_y, float reference_z, float twist); void -- Defines a viewing transformation by giving the view position vx, vy, vz, and the coordinates of a reference point in the scene at px, py, pz. Twist controls a rotation along the viewer's z axis  
  swf_modifyobject(int depth, int how); void -- Updates the position and/or color of the object  
  swf_mulcolor(float r, float g, float b, float a); void -- Sets the global multiply color to the rgba value specified  
  swf_nextid(); int -- Returns a free objid  
  swf_oncondition(int transition); void -- Describes a transition used to trigger an action list  
  swf_openfile(string filename, float width, float height, float framerate, float r, float g, float b); void -- Create a Shockwave Flash file given by name, with width xsize and height ysize at a frame rate of framerate and a background color specified by a red value of r, green value of g and a blue value of b  
  swf_ortho(float xmin, float xmax, float ymin, float ymax, float zmin, float zmax); void -- Defines an orthographic mapping of user coordinates onto the current viewport  
  swf_ortho2(float xmin, float xmax, float ymin, float ymax); void -- Defines a 2-D orthographic mapping of user coordinates onto the current viewport  
  swf_perspective(float fovy, float aspect, float near, float far); void -- Define a perspective projection transformation.  
  swf_placeobject(int objid, int depth); void -- Places the object, objid, in the current frame at depth, depth  
  swf_polarview(float dist, float azimuth, float incidence, float twist); void -- Defines he viewer's position in polar coordinates  
  swf_popmatrix(); void -- Restore a previous transformation matrix  
  swf_posround(int round); void -- This enables or disables rounding of the translation when objects are places or moved  
  swf_pushmatrix(); void -- Push the current transformation matrix onto the stack  
  swf_removeobject(int depth); void -- Removes the object at the specified depth  
  swf_rotate(float angle, string axis); void -- Rotate the current transformation by the given angle about x, y, or z axis. The axis may be 'x', 'y', or 'z'  
  swf_scale(float x, float y, float z); void -- Scale the current transformation  
  swf_setfont(int fontid); void -- Sets fontid to the current font  
  swf_setframe(int framenumber); void -- Set the current frame number to the number given by frame_number  
  swf_shapearc(float x, float y, float r, float ang1, float ang2); void -- Draws a circular arc from ang1 to ang2. The center of the circle is given by x, and y. r specifies the radius of the arc  
  swf_shapecurveto(float x1, float y1, float x2, float y2); void -- Draws a quadratic bezier curve starting at the current position using x1, y1 as an off curve control point and using x2, y2 as the end point. The current position is then set to x2, y2.  
  swf_shapecurveto3(float x1, float y1, float x2, float y2, float x3, float y3); void -- Draws a cubic bezier curve starting at the current position using x1, y1 and x2, y2 as off curve control points and using x3,y3 as the end point.  The current position is then sent to x3, y3  
  swf_shapefillbitmapclip(int bitmapid); void -- Sets the current fill mode to clipped bitmap fill. Pixels from the previously defined bitmapid will be used to fill areas  
  swf_shapefillbitmaptile(int bitmapid); void -- Sets the current fill mode to tiled bitmap fill. Pixels from the previously defined bitmapid will be used to fill areas  
  swf_shapefilloff(); void -- Turns off filling  
  swf_shapefillsolid(float r, float g, float b, float a); void -- Sets the current fill style to a solid fill with the specified rgba color  
  swf_shapelinesolid(float r, float g, float b, float a, float width); void -- Create a line with color defined by rgba, and a width of width  
  swf_shapelineto(float x, float y); void -- Draws a line from the current position to x,y, the current position is then set to x,y  
  swf_shapemoveto(float x, float y); void -- swf_shapemoveto moves the current position to the given x,y.  
  swf_showframe(); void -- Finish the current frame  
  swf_startbutton(int objid, int type); void -- Start a button with an object id, objid and a type of either TYPE_MENUBUTTON or TYPE_PUSHBUTTON  
  swf_startdoaction(); void -- Starts the description of an action list for the current frame  
  swf_startshape(int objid); void -- Initialize a new shape with object id, objid  
  swf_startsymbol(int objid); void -- Create a new symbol with object id, objid  
  swf_textwidth(string str); float -- Calculates the width of a string, str, using the current fontsize & current font  
  swf_translate(float x, float y, float z); void -- Translate the current transformation  
  swf_viewport(float xmin, float xmax, float ymin, float ymax); void -- Selects an area on the drawing surface for future drawing  
  sybase_affected_rows([int link_identifier]); int -- Get number of affected rows in last query  
  sybase_close(int link_identifier); bool -- Close Sybase connection  
  sybase_connect(string servername, string username, string password [, string charset]); int -- Open Sybase server connection  
  sybase_data_seek(int result_identifier, int row_number); bool -- Move internal row pointer  
  sybase_fetch_array(int result); array -- Fetch row as array  
  sybase_fetch_field(int result [, int field_offset]); object -- Get field information  
  sybase_fetch_object(int result); int -- Fetch row as object  
  sybase_fetch_row(int result); array -- Get row as enumerated array  
  sybase_field_seek(int result, int field_offset); int -- Set field offset  
  sybase_free_result(int result); bool -- Free result memory  
  sybase_get_last_message(); string -- Returns the last message from server (over min_message_severity)  
  sybase_min_client_severity(int severity); void -- Sets minimum client severity  
  sybase_min_error_severity(int severity); void -- Sets the minimum error severity  
  sybase_min_message_severity(int severity); void -- Sets the minimum message severity  
  sybase_min_server_severity(int severity); void -- Sets minimum server severity  
  sybase_num_fields(int result); int -- Get number of fields in result  
  sybase_num_rows(int result); int -- Get number of rows in result  
  sybase_pconnect(string servername, string username, string password [, string charset]); int -- Open persistent Sybase connection  
  sybase_query(string query, int link_identifier); int -- Send Sybase query  
  sybase_result(int result, int row, mixed field); string -- Get result data  
  sybase_select_db(string database_name, int link_identifier); bool -- Select Sybase database  
  token_get_all(string source); array --   token_name(int type); string --   odbc_autocommit(resource connection_id [, bool OnOff]); bool -- Toggle autocommit mode or get status  
  odbc_binmode(resource result_id, int mode); int -- Handle binary column data  
  odbc_close_all(); void -- Close all ODBC connections  
  odbc_close(resource connection_id); void -- Close an ODBC connection  
  odbc_columnprivileges(resource connection_id [, string qualifier [, string owner [, string table_name [, string column_name]]]]); int -- Returns a result identifier that can be used to fetch a list of columns and associated privileges for the specified table  
  odbc_columns(resource connection_id [, string qualifier [, string schema [, string table_name [, string column_name]]]]); int -- Returns a result identifier that can be used to fetch a list of column names in specified tables  
  odbc_commit(resource connection_id); bool -- Commit an ODBC transaction  
  odbc_connect(string dsn, string user, string password [, int cursor_type]); resource -- Connect to a datasource  
  odbc_cursor(resource result_id); string -- Get cursor name  
  odbc_data_source(resource connection_id, constant fetch_type); resource -- Given the name of a constant this function will return the constants associated value  
  odbc_do(resource conn_id, string query); resource
  odbc_error([resource connection_id]); string -- Get the last error code  
  odbc_errormsg([resource connection_id]); string -- Get the last error message  
  odbc_exec(resource connection_id, string query_string); resource -- Prepare and execute an SQL statement  
  odbc_execute(resource result_id [, array parameters_array]); resource -- Execute a prepared statement  
  odbc_fetch_array(resource result [, int rownumber]); array -- Fetch a result row as an associative array  
  odbc_fetch_into(resource result_id [, int rownumber, array result_array]); bool -- Fetch one result row into an array  
  odbc_fetch_object(resource result [, int rownumber]); object -- Fetch a result row as an object  
  odbc_fetch_row(resource result_id [, int row_number]); bool -- Fetch a row  
  odbc_field_len(resource result_id, int field_number); int -- Get the length (precision) of a column  
  odbc_field_name(resource result_id, int field_number); string -- Get a column name  
  odbc_field_num(resource result_id, string field_name); int -- Return column number  
  odbc_field_precision(resource result_id, int field_number); string
  odbc_field_scale(resource result_id, int field_number); string -- Get the scale of a column  
  odbc_field_type(resource result_id, int field_number); string -- Get the datatype of a column  
  odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table); resource -- Returns a result identifier to either a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table  
  odbc_free_result(resource result_id); bool -- Free resources associated with a result  
  odbc_gettypeinfo(resource connection_id [, int data_type]); int -- Returns a result identifier containing information about data types supported by the data source  
  odbc_longreadlen(resource result_id, int length); int -- Handle LONG columns  
  odbc_next_result(resource result_id); bool -- Checks if multiple results are avaiable  
  odbc_num_fields(resource result_id); int -- Get number of columns in a result  
  odbc_num_rows(resource result_id); int -- Get number of rows in a result  
  odbc_pconnect(string dsn, string user, string password [, int cursor_type]); int -- Establish a persistent connection to a datasource  
  odbc_prepare(resource connection_id, string query_string); resource -- Prepares a statement for execution  
  odbc_primarykeys(resource connection_id, string qualifier, string owner, string table); resource -- Returns a result identifier listing the column names that comprise the primary key for a table  
  odbc_procedurecolumns(resource connection_id [, string qualifier [, string owner [, string proc [, string column]]]]); resource -- Returns a result identifier containing the list of input and output parameters, as well as the columns that make up the result set for the specified procedures  
  odbc_procedures(resource connection_id [, string qualifier [, string owner [, string name]]]); resource -- Returns a result identifier containg the list of procedure names in a datasource  
  odbc_result_all(resource result_id [, string format]); int -- Print result as HTML table  
  odbc_result(resource result_id, mixed field); string -- Get result data  
  odbc_rollback(resource connection_id); int -- Rollback a transaction  
  odbc_setoption(resource id, int function, int option, int param); int -- Sets connection or statement options  
  odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable); resource -- Returns a result identifier containing either the optimal set of columns that uniquely identifies a row in the table or columns that are automatically updated when any value in the row is updated by a transaction  
  odbc_statistics(resource connection_id, string qualifier, string owner, string table_name, int unique, int accuracy); resource -- Returns a result identifier that contains statistics about a single table and the indexes associated with the table  
  odbc_tableprivileges(resource connection_id [, string qualifier [, string owner [, string name]]]); int -- Returns a result identifier containing a list of tables and the privileges associated with each table  
  odbc_tables(resource connection_id [, string qualifier [, string owner [, string name [, string types]]]]); int -- Call the SQLTables function  
  base64_decode(string encoded_data); string -- Decodes string using MIME base64 algorithm  
  base64_encode(string data); string -- Encodes string using MIME base64 algorithm  
  parse_url(string url); array -- Parse a URL and return its components  
  rawurldecode(string str); string -- Decodes URL-encodes string  
  rawurlencode(string str); string -- URL-encodes string  
  urldecode(string str); string -- Decodes URL-encoded string  
  urlencode(string str); string -- URL-encodes string  
  empty(mixed var); boolean
  floatval(mixed var); float -- Get the float value of a variable  
  get_defined_vars(); array -- Returns an associative array of names and values of all currently defined variable names (variables in the current scope)  
  get_resource_type(resource handle); string -- Get the resource type name for a given resource  
  gettype(mixed var); string -- Returns the type of the variable  
  import_request_variables(string types [, string prefix]); bool -- Import GET/POST/Cookie variables into the global scope  
  intval(mixed var [, int base]); int -- Get the integer value of a variable using the optional base for the conversion  
  is_array(mixed var); bool -- Returns true if the object is of this class or has this class as one of its parents  
  is_bool(mixed var); bool -- Returns true if variable is a boolean  
  is_callable(mixed var [, bool syntax_only [, string callable_name]]); bool -- Returns true if var is callable.  
  is_float(mixed var); bool -- Returns true if variable is float point 
  is_int(mixed var); bool
  is_null(mixed var); bool -- Returns true if variable is null  
  is_numeric(mixed var); bool -- Returns true if value is a number or a numeric string  
  is_object(mixed var); bool -- Returns true if variable is an object  
  is_resource(mixed var); bool -- Returns true if variable is a resource  
  is_scalar(mixed var); bool -- Returns true if value is a scalar  
  is_string(mixed var); bool -- Returns true if variable is a string  
  isset(mixed var [, mixed var [, ...]]); bool
  print_r(mixed expression); bool -- Returns e raised to the power of the number  
  serialize(mixed value); string -- Returns a string representation of variable (which can later be unserialized)  
  settype(mixed var, string type); bool -- Set the type of the variable  
  strval(mixed var); string -- Get the string value of a variable  
  unserialize(string str); mixed -- Takes a string representation of variable and recreates it  
  unset(mixed var [, mixed var [, ...]]); void
  var_dump(mixed expression [, mixed expression [, ...]]); void -- Dumps a string representation of variable to output  
  var_export(mixed expression [, bool return]); mixed -- Outputs or returns a string representation of a variable  
  vpopmail_add_alias_domain_ex(string olddomain, string newdomain); bool
  vpopmail_add_alias_domain(string domain, string aliasdomain); bool
  vpopmail_add_domain_ex(string domain, string passwd [, string quota [, string bounce [, bool apop]]]); bool
  vpopmail_add_domain(string domain, string dir, int uid, int gid); bool -- Directory class with properties, handle and class and methods read, rewind and close  
  vpopmail_add_user(string user, string domain, string password [, string gecos [, bool apop]]); bool
  vpopmail_alias_add(string user, string domain, string alias); bool
  vpopmail_alias_del_domain(string domain); bool
  vpopmail_alias_del(string user, string domain); bool
  vpopmail_alias_get_all(string domain); array
  vpopmail_alias_get(string alias, string domain); array
  vpopmail_auth_user(string user, string domain, string password [, string apop]); bool
  vpopmail_del_domain_ex(string domain); bool
  vpopmail_del_domain(string domain); bool
  vpopmail_del_user(string user, string domain); bool
  vpopmail_error(); string
  vpopmail_passwd(string user, string domain, string password); bool
  vpopmail_set_user_quota(string user, string domain, string quota); bool
  w32api_deftype(string typename, string member1_type, string member1_name [, string ... [, string ...]]); bool
  w32api_init_dtype(string typename, mixed value [, mixed ...]); resource
  w32api_invoke_function(string funcname, mixed argument [, mixed ...]); mixed
  w32api_register_function(string libary, string function_name, string return_type); bool
  w32api_set_call_method(int method); void
  wddx_add_vars(int packet_id, mixed name_var [, mixed ...]) -- Serializes given variables and adds them to packet given by packet_id  
  wddx_deserialize(string packet); mixed -- Deserializes given packet and returns a PHP value  
  wddx_packet_end(int packet_id); string -- Ends specified WDDX packet and returns the string containing the packet  
  wddx_packet_start([string comment]); int -- Starts a WDDX packet with optional comment and returns the packet id  
  wddx_serialize_value(mixed var [, string comment]); string -- Creates a new packet and serializes the given value  
  wddx_serialize_vars(mixed var_name [, mixed ...]); string -- Creates a new packet and serializes given variables into a struct  
  utf8_decode(string data); string -- Converts a UTF-8 encoded string to ISO-8859-1  
  utf8_encode(string data); string -- Encodes an ISO-8859-1 string to UTF-8  
  xml_error_string(int code); string -- Get XML parser error string  
  xml_get_current_byte_index(resource parser); int -- Get current byte index for an XML parser  
  xml_get_current_column_number(resource parser); int -- Get current column number for an XML parser  
  xml_get_current_line_number(resource parser); int -- Get current line number for an XML parser  
  xml_get_error_code(resource parser); int -- Get XML parser error code  
  xml_parse_into_struct(resource parser, string data, array &values, array &index); int -- Parsing a XML document  
  xml_parse(resource parser, string data [, bool is_final]); bool -- Start parsing an XML document  
  xml_parser_create_ns([string encoding [, string sep]]); resource -- Create an XML parser  
  xml_parser_create([string encoding]); resource -- Create an XML parser  
  xml_parser_free(resource parser); bool -- Free an XML parser  
  xml_parser_get_option(resource parser, int option); mixed -- Get options from an XML parser  
  xml_parser_set_option(resource parser, int option, mixed value); bool -- Set options in an XML parser  
  xml_set_character_data_handler(resource parser, string handler); bool -- Set up character data handler  
  xml_set_default_handler(resource parser, string handler); bool -- Set up default handler  
  xml_set_element_handler(resource parser, string start_element_handler, string end_element_handler); bool -- Set up start and end element handlers  
  xml_set_end_namespace_decl_handler(resource pind, string hdl); bool -- Set up character data handler  
  xml_set_external_entity_ref_handler(resource parser, string handler); bool -- Set up external entity reference handler  
  xml_set_notation_decl_handler(resource parser, string handler); bool -- Set up notation declaration handler  
  xml_set_object(resource parser, object object); void -- Set up object which should be used for callbacks  
  xml_set_processing_instruction_handler(resource parser, string handler); bool -- Set up processing instruction (PI) handler  
  xml_set_start_namespace_decl_handler(resource pind, string hdl); bool -- Set up character data handler  
  xml_set_unparsed_entity_decl_handler(resource parser, string handler); bool -- Set up unparsed entity declaration handler  
  xmlrpc_decode_request(string xml, string method [, string encoding]); array -- Decodes XML into native PHP types  
  xmlrpc_decode(string xml [, string encoding]); array -- Decodes XML into native PHP types  
  xmlrpc_encode_request(string method, mixed params); string -- Generates XML for a method request  
  xmlrpc_encode(mixed value); string -- Generates XML for a PHP value  
  xmlrpc_get_type(mixed value); string -- Gets xmlrpc type for a PHP value. Especially useful for base64 and datetime strings  
  xmlrpc_parse_method_descriptions(string xml); array -- Decodes XML into a list of method descriptions  
  xmlrpc_server_add_introspection_data(resource server, array desc); int -- Adds introspection documentation   
  xmlrpc_server_call_method(resource server, string xml, mixed user_data [, array output_options]); mixed -- Parses XML requests and call methods  
  xmlrpc_server_create(); resource -- Creates an xmlrpc server  
  xmlrpc_server_destroy(resource server); void -- Destroys server resources  
  xmlrpc_server_register_introspection_callback(resource server, string function); bool -- Register a PHP function to generate documentation  
  xmlrpc_server_register_method(resource server, string method_name, string function); bool -- Register a PHP function to handle method matching method_name  
  xmlrpc_set_type(string value, string type); bool -- Sets xmlrpc type, base64 or datetime, for a PHP string value  
  xslt_create(); resource -- Create a new XSLT processor  
  xslt_errno(resource xh); int -- Error number  
  xslt_error(resource xh); mixed -- Error string  
  xslt_free(resource xh); void -- Free the xslt processor up  
  xslt_process(resource xh, string xml, string xsl [, string result [, array arguments [, array parameters]]]); mixed -- Perform the xslt transformation  
  xslt_set_base(resource xh, string uri); void -- Sets the base URI for all XSLT transformations  
  xslt_set_encoding(resource xh, string encoding); void -- Set the output encoding for the current stylesheet  
  xslt_set_error_handler(resource xh, mixed handler); void -- Set the error handler, to be called when an XSLT error happens  
  xslt_set_log(resource xh, mixed log); void -- Set the log file to write the errors to (defaults to stderr)  
  xslt_set_sax_handler(resource xh, array handlers); void
  xslt_set_sax_handlers(resource processor, array handlers); void -- Set the SAX handlers to be called when the XML document gets processed  
  xslt_set_scheme_handler(resource xh, array handlers); void
  xslt_set_scheme_handlers(resource processor, array handlers); void -- Set the scheme handlers for the XSLT processor  
  yaz_addinfo(int id); int -- Return additional info for last error (empty string if none)  
  yaz_ccl_conf(int id, array config); int -- Configure CCL package  
  yaz_ccl_parse(int id, string query, array & result); int -- Parse a CCL query  
  yaz_close(int id); int -- Destory and close target  
  yaz_connect(string zurl [, mixed options]); int -- Create target with given zurl. Returns positive id if successful.  
  yaz_database(int id, string databases); int
  yaz_element(int id, string elementset); int -- Set Element-Set-Name for retrieval  
  yaz_errno(int id); int -- Return last error number (>0 for bib-1 diagnostic, <0 for other error, 0 for no error  
  yaz_error(int id); string -- Return last error message  
  yaz_hits(int id); int -- Return number of hits (result count) for last search  
  yaz_itemorder(array args); int -- Sends Item Order request  
  yaz_present(); int -- Retrieve records  
  yaz_range(int id, int start, int number); int -- Set result set start point and number of records to request  
  yaz_record(int id, int pos, string type); int -- Return record information at given result set position  
  yaz_scan_result(int id [, array & result]); array -- Inspects Scan Result  
  yaz_scan(int id, string type, string startterm [, array flags]); int -- Sends Scan Request  
  yaz_search(int id, string type, string query); int -- Specify query of type for search - returns true if successful  
  yaz_sort(int id, string criteria); int -- Set result set sorting criteria  
  yaz_syntax(int id, string syntax); int -- Set record syntax for retrieval  
  yaz_wait([array options]); int -- Process events.  
  zip_close(resource zip); void -- Close a Zip archive  
  zip_entry_close(resource zip_entry); void -- Close a zip entry  
  zip_entry_compressedsize(resource zip_entry); int -- Return the compressed size of a ZZip entry  
  zip_entry_compressionmethod(resource zip_entry); string -- Return a string containing the compression method used on a particular entry  
  zip_entry_filesize(resource zip_entry); int -- Return the actual filesize of a ZZip entry  
  zip_entry_name(resource zip_entry); string -- Return the name given a ZZip entry  
  zip_entry_open(resource zip, resource zip_entry [, string mode]); bool -- Open a Zip File, pointed by the resource entry  
  zip_entry_read(resource zip_entry [, int length]); string -- Read X bytes from an opened zip entry  
  zip_open(string filename); resource -- Open a new zip archive for reading  
  zip_read(resource zip); resource -- Returns the next file in the archive  
  gzclose(resource zp); int
  gzcompress(string data [, int level]); string -- Gzip-compress a string  
  gzdeflate(string data [, int level]); string -- Gzip-compress a string  
  gzencode(string data [, int level [, int encoding_mode]]); string -- GZ encode a string  
  gzeof(resource zp); int
  gzfile(string filename [, int use_include_path]); array -- Read und uncompress entire .gz-file into an array  
  gzgetc(resource zp); string
  gzgets(resource zp, int length); string
  gzgetss(resource zp, int length [, string allowable_tags]); string
  gzinflate(string data [, int length]); string -- Unzip a gzip-compressed string  
  gzopen(string filename, string mode [, int use_include_path]); resource -- Open a .gz-file and return a .gz-file pointer  
  gzpassthru(resource zp); int
  gzputs(resource zp, string str [, int length]); int
  gzread(resource zp, int length); string
  gzrewind(resource zp); int
  gzseek(resource zp, int offset); int
  gztell(resource zp); int
  gzuncompress(string data [, int length]); string -- Unzip a gzip-compressed string  
  gzwrite(resource zp, string string [, int length]); int
  readgzfile(string filename [, int use_include_path]); int -- Output a .gz-file  
